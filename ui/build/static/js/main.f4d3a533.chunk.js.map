{"version":3,"sources":["theme/theme.js","containers/NavContainer.js","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","grey","overrides","PrivateNotchedOutline","root","MuiOutlinedInput","notchedOutline","borderColor","borderWidth","MuiTextField","MuiToggleButtonGroup","grouped","borderLeft","MuiToggleButton","border","backgroundColor","color","fontWeight","NavContainer","props","store","this","set","window","ethereum","web3Provider","enable","console","error","web3","currentProvider","log","Web3","walletType","eth","getAccounts","accounts","classes","walletAddress","get","length","state","getState","Grid","item","xs","className","navContainer","container","alignItems","Typography","variant","justify","Button","onClick","initBrowserWallet","bind","accountButton","slice","React","Component","withStyles","paddingTop","theme","spacing","paddingBottom","minHeight","logo","height","width","marginRight","withStore","App","address","amount","gateway","interval","API_URL","fetch","method","headers","body","JSON","stringify","sourceAmount","sourceAsset","destinationAsset","destinationAddress","request","json","setState","gatewayAddress","clearInterval","setInterval","a","req","data","txHash","status","ThemeProvider","Container","maxWidth","contentContainer","direction","placeholder","onChange","e","target","value","getGateway","Fragment","href","createStore","flexGrow","paper","boxShadow","borderRadius","shape","padding","marginTop","marginBottom","fontSize","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4d3a533.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#000',\r\n            main: '#000',\r\n            dark: '#000',\r\n            contrastText: '#fff',\r\n        },\r\n        // primary: blueGrey,\r\n        secondary: grey,\r\n    },\r\n    overrides: {\r\n        // Style sheet name ⚛️\r\n        // MuiButton: {\r\n        //   // Name of the rule\r\n        //   text: {\r\n        //     // Some CSS\r\n        //     color: 'white',\r\n        //   },\r\n        // }\r\n        PrivateNotchedOutline: {\r\n            root: {\r\n            }\r\n        },\r\n        // '.MuiOutlinedInput-root:hover':{\r\n        //     borderColor: '#EBEBEB !important'\r\n        // },\r\n        MuiOutlinedInput: {\r\n            // root:{\r\n            //     '&:hover': {\r\n            //         // notchedOutline: {\r\n            //             borderColor: '#EBEBEB'\r\n            //         // }\r\n            //     }\r\n            // },\r\n            notchedOutline: {\r\n                borderColor: '#EBEBEB !important',\r\n                borderWidth: '1px !important'\r\n            }\r\n        },\r\n        MuiTextField: {\r\n\r\n        },\r\n        MuiToggleButtonGroup: {\r\n          grouped: {\r\n            '&:not(:first-child)': {\r\n              borderLeft: '1px solid #EBEBEB'\r\n            }\r\n          }\r\n        },\r\n        // .MuiToggleButtonGroup-grouped:not(:first-child)\r\n        MuiToggleButton: {\r\n            root: {\r\n                border: '1px solid #EBEBEB',\r\n                backgroundColor: '#fff',\r\n                '&.Mui-selected': {\r\n                    // back\r\n                    backgroundColor: '#fff !important',\r\n                    color: '#000',\r\n                    fontWeight: '500',\r\n                    '&:hover': {\r\n                        backgroundColor: '#fff !important',\r\n                    }\r\n                },\r\n                '&:hover': {\r\n                    backgroundColor: '#fff !important',\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import React from 'react';\r\nimport Web3 from \"web3\";\r\nimport { withStore } from '@spyna/react-store'\r\nimport { withStyles } from '@material-ui/styles';\r\nimport theme from '../theme/theme'\r\nimport classNames from 'classnames'\r\n\r\nimport AccountIcon from '@material-ui/icons/AccountCircle';\r\nimport WifiIcon from '@material-ui/icons/Wifi';\r\n\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\n\r\nconst styles = () => ({\r\n    navContainer: {\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(3),\r\n        minHeight: 52\r\n    },\r\n    logo: {\r\n        height: 22,\r\n        width: 25,\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    accountButton: {\r\n      '& svg': {\r\n        marginRight: theme.spacing(1)\r\n      }\r\n    }\r\n})\r\n\r\nclass NavContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async initBrowserWallet() {\r\n        const store = this.props.store\r\n\r\n        store.set('walletLoading', true)\r\n\r\n        let web3Provider;\r\n\r\n        // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\r\n        // Modern dApp browsers...\r\n        if (window.ethereum) {\r\n            web3Provider = window.ethereum;\r\n            try {\r\n                // Request account access\r\n                await window.ethereum.enable();\r\n            } catch (error) {\r\n                // User denied account access...\r\n                console.error(\"User denied account access\")\r\n            }\r\n        }\r\n        // Legacy dApp browsers...\r\n        else if (window.web3) {\r\n            web3Provider = window.web3.currentProvider;\r\n        }\r\n        // If no injected web3 instance is detected, fall back to Ganache\r\n        else {\r\n            this.log(\"Please install MetaMask!\");\r\n        }\r\n\r\n        const web3 = new Web3(web3Provider);\r\n        const walletType = 'browser'\r\n        const accounts = await web3.eth.getAccounts()\r\n\r\n        await window.ethereum.enable();\r\n\r\n        store.set('walletLoading', false)\r\n        store.set('walletAddress', accounts[0])\r\n        store.set('web3', web3)\r\n        store.set('walletType', walletType)\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            store\r\n        } = this.props\r\n\r\n        const walletAddress = store.get('walletAddress')\r\n        const isSignedIn = walletAddress && walletAddress.length\r\n\r\n        console.log(this.props, this.state, this.props.store.getState())\r\n\r\n        return <Grid item xs={12}>\r\n            {<Grid className={classes.navContainer} container alignItems='center'>\r\n              <Grid item xs={6}>\r\n                  <Grid container alignItems='center'>\r\n                      <Typography variant='h6'>Starter-ui</Typography>\r\n                  </Grid>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                  <Grid container justify='flex-end'>\r\n                  <Button color='primary' onClick={this.initBrowserWallet.bind(this)} variant=\"outlined\" className={classes.accountButton}>\r\n                    {walletAddress ? (walletAddress.slice(0,7) + '...' + walletAddress.slice(walletAddress.length - 5)) : 'Connect wallet'}\r\n                  </Button>\r\n                  </Grid>\r\n              </Grid>\r\n            </Grid>}\r\n        </Grid>\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withStore(NavContainer))\r\n","import React from 'react';\r\nimport { createStore, withStore } from '@spyna/react-store'\r\n\r\nimport NavContainer from './containers/NavContainer'\r\n\r\nimport theme from './theme/theme'\r\nimport classNames from 'classnames'\r\n\r\nimport { withStyles, ThemeProvider } from '@material-ui/styles';\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst styles = () => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n  },\r\n  navContainer: {\r\n    paddingTop: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    minHeight: 52\r\n  },\r\n  contentContainer: {\r\n      boxShadow: '0px 0px 30px 0px rgba(0, 0, 0, 0.05)',\r\n      borderRadius: theme.shape.borderRadius,\r\n      padding: theme.spacing(3),\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n      '& input': {\r\n          marginBottom: theme.spacing(1)\r\n      }\r\n  },\r\n  gateway: {\r\n      marginTop: theme.spacing(2)\r\n  },\r\n  status: {\r\n      fontSize: 14\r\n  }\r\n})\r\n\r\nconst initialState = {\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: '',\r\n            amount: '',\r\n            gateway: ''\r\n        }\r\n\r\n        this.interval = null\r\n    }\r\n\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async getGateway() {\r\n        const API_URL = 'http://localhost:3000'\r\n        const request = await fetch(`${API_URL}/swap-gateway/create`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                sourceAmount: '0.0001',\r\n                sourceAsset: 'BTC',\r\n                destinationAsset: 'ETH',\r\n                destinationAddress: '0x62ACc475F68254941e923958Fcad78e10A4CfF06'\r\n            })\r\n        })\r\n        const json = await request.json()\r\n        console.log(json)\r\n        this.setState({\r\n            gateway: json.gatewayAddress\r\n        })\r\n\r\n        if (this.interval) {\r\n            clearInterval(this.interval)\r\n        }\r\n\r\n        this.interval = setInterval(async () => {\r\n            const req = await fetch(`${API_URL}/swap-gateway/status?gateway=${json.gatewayAddress}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                }\r\n            })\r\n\r\n            const data = await req.json()\r\n            this.setState({\r\n                txHash: data.txHash,\r\n                status: data.status\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    render() {\r\n        const classes = this.props.classes\r\n\r\n        console.log(this.state, this.props)\r\n\r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <Container maxWidth=\"sm\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n\r\n                        </Grid>\r\n\r\n\r\n                        <Grid item xs={12} className={classes.contentContainer}>\r\n                            <Grid container direction='column'>\r\n                                <Grid item xs={12}>\r\n                                    <input placeholder='ETH Address' onChange={e => {\r\n                                        this.setState({\r\n                                            address: e.target.value\r\n                                        })\r\n                                    }}/>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <input placeholder='BTC Amount' onChange={e => {\r\n                                        this.setState({\r\n                                            amount: e.target.value\r\n                                        })\r\n                                    }}/>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <button onClick={this.getGateway.bind(this)}>Get Swap Address</button>\r\n                                </Grid>\r\n                                {this.state.gateway && <React.Fragment><Grid className={classes.gateway} item xs={12}>\r\n                                        {this.state.gateway}\r\n                                    </Grid>\r\n                                    <Grid className={classes.status} item xs={12}>\r\n                                        {this.state.status === 'complete' ? <span>\r\n                                            Swap submitted! <a href={'https://kovan.etherscan.io/tx/' + this.state.txHash} target='_blank'>View transaction</a>\r\n                                        </span> : <span>Waiting for {this.state.amount} BTC sent to gateway...</span>}\r\n                                    </Grid></React.Fragment>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default createStore(withStyles(styles)(App), initialState)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}