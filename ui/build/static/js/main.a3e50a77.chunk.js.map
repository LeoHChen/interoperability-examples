{"version":3,"sources":["utils/txUtils.js","utils/networkingUtils.js","theme/theme.js","containers/NavContainer.js","containers/ActionTabsContainer.js","components/NetworkChooser.js","components/SwapTransactionStatus.js","containers/DepositContainer.js","components/StreamTransactionStatus.js","components/ClaimStreamTransaction.js","containers/Stream/ViewStreamContainer.js","components/StreamTransaction.js","components/Disclosure.js","containers/Stream/StreamContainer.js","App.js","serviceWorker.js","index.js","assets/renvm-logo.svg"],"names":["addTx","store","tx","storeString","type","txs","get","push","set","localStorage","setItem","JSON","stringify","window","updateTx","newTx","map","t","id","removeTx","filter","streamExists","streams","beneficiary","startTime","stream","destAddress","length","getStreams","a","this","props","web3","console","log","getState","adapterAddress","adapterContract","eth","Contract","streamAdapterABI","adapter","methods","getSchedules","call","schedules","recoverStreams","bind","utils","fromAscii","network","transactions","s","alreadyExists","toAscii","amount","BigNumber","Math","random","toFixed","instant","awaiting","source","dest","div","toNumber","duration","error","txHash","schedule","claimTransactions","calculateStreamProgress","amountClaimedPercentage","start","Number","now","floor","Date","end","totalClaimablePercentrage","amountClaimed","amountClaimablePercentage","totalClaimableAmount","claimedAmount","claimableAmount","remaingDuration","updateStreamInfo","sched","minutesClaimed","Object","assign","claim","web3Context","claimAmount","lib","getGasPrice","gasPrice","Promise","resolve","reject","send","from","accounts","round","gasLimit","on","hash","concat","timestamp","confirmationNumber","receipt","completeDeposit","pendingShiftIns","params","renResponse","renSignature","adapterABI","shiftInWithSwap","contractCalls","contractParams","value","sendAmount","autogen","nhash","result","addVestingSchedule","p","transactionHash","initShiftIn","renBtcAddress","ethSig","sdk","contractFn","name","data","sendToken","RenJS","Tokens","BTC","Btc2Eth","sats","sendTo","nonce","randomNonce","shiftIn","shiftIns","initDeposit","btcConfirmations","indexOf","addr","waitForDeposit","dep","utxo","confirmations","btcTxHash","txid","deposit","submitToRenVM","signature","response","initInstantSwap","address","fetch","method","headers","body","sourceAmount","sourceAsset","destinationAsset","destinationAddress","request","json","gatewayAddress","initInstantMonitoring","setInterval","req","status","initMonitoring","signKey","ephemeral","relay_client_config","txfee","verbose","initNetworking","fromConnection","gsn","initLocalTransactions","swaps","getItem","parse","switchNetwork","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","grey","overrides","PrivateNotchedOutline","root","MuiOutlinedInput","notchedOutline","borderColor","borderWidth","MuiTextField","MuiToggleButtonGroup","grouped","borderLeft","MuiToggleButton","border","backgroundColor","color","fontWeight","NavContainer","classes","walletAddress","state","Grid","item","xs","className","navContainer","container","alignItems","Typography","variant","React","Component","withStyles","paddingTop","theme","spacing","paddingBottom","minHeight","logo","height","width","marginRight","accountButton","withStore","ActionTabsContainer","history","src","RenVMLogo","Hidden","xsDown","Tabs","orientation","onChange","e","changeTabs","tabs","Tab","label","smUp","tabsMobile","paddingRight","display","flexDirection","breakpoints","down","justifyContent","networkChooser","marginTop","fontSize","currentNetwork","Select","native","inputProps","Fragment","DepositContainer","clearInterval","swapMonitor","instantSwapSelected","showInstant","disabled","contentContainer","direction","desc","target","amountContainer","TextField","classNames","input","size","placeholder","InputProps","endAdornment","InputAdornment","position","switchContainer","FormControlLabel","control","Switch","checked","swapButtonContainer","Button","swapButton","onClick","startInstant","Divider","divider","unfinished","index","key","depositItem","depositStatus","SwapTransactionStatus","viewLink","href","info","caption","flexGrow","paper","borderRadius","shape","padding","marginBottom","title","btcLink","actionTabs","textAlign","complete","claimItem","links","marginLeft","progress","progressTop","progressMiddle","animationDuration","left","progressBottom","progressContainer","toLocaleString","ViewStreamContainer","loaded","totalClaimable","availableAmount","availablePercentage","initAddressRef","createRef","interval","scheduleInterval","mounted","selectedTx","setState","current","claimRequesting","backLink","back","hidden","initContainer","spinner","CircularProgress","spinnerTop","thickness","disableShrink","spinnerBottom","awaitingStatus","cancelLink","justify","depositAddress","inputRef","progressText","totalStreamed","decimals","claimButton","onView","onCancel","loadingContianer","margin","top","minWidth","claims","completed","Chip","icon","StreamContainer","activeView","searchAddress","validation","validate","validAddress","bech32","searchLink","viewTx","radio","initialState","AppWrapper","selectedActionTab","Container","maxWidth","sm","md","content","warning","AppWrapperComponent","App","ThemeProvider","createStore","whiteSpace","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a3e50a77.chunk.js","sourcesContent":["import RenJS from \"@renproject/ren\";\nimport adapterABI from './exchangeAdapterSimpleABI.json'\nimport streamAdapterABI from './streamAdapterSimpleABI.json'\nimport BigNumber from 'bignumber.js'\n\n// export const API_URL = 'http://localhost:3000'\nexport const API_URL = ''\nexport const MIN_CLAIM_AMOUNT = 0.00010001\nexport const SWAP_ADAPTER_TEST = '0xade8792c3ee90320cabde200ccab34b27cc88651'\nexport const SWAP_ADAPTER_MAIN = '0x35Db75fc0D5457eAb9C21AFb5857716427F8129D'\nexport const STREAM_ADAPTER_TEST = '0x1B1994b62Ca8d6f8A79CEc0505de2DF728FCcbb7'\nexport const STREAM_ADAPTER_MAIN = '0x57bE80A340C310Bf4211C8bFED8c846bD92c5c55'\nlet swapMonitor = null\n\nexport const addTx = (store, tx) => {\n    const storeString = tx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    let txs = store.get(storeString)\n    txs.push(tx)\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const updateTx = (store, newTx) => {\n    const storeString = newTx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    const txs = store.get(storeString).map(t => {\n        if (t.id === newTx.id) {\n            // const newTx = Object.assign(t, props)\n            return newTx\n        }\n        return t\n    })\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const removeTx = (store, tx) => {\n    const storeString = tx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    let txs = store.get(storeString).filter(t => (t.id !== tx.id))\n    // console.log(txs)\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const streamExists = function(streams, beneficiary, startTime) {\n    return streams.filter(stream => (stream.destAddress === beneficiary && stream.startTime === startTime)).length > 0\n}\n\nexport const getStreams = async function() {\n    // console.log('search', destAddress)\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    console.log(store.getState())\n    // const web3Context = store.get('web3Context')\n    const adapterAddress = store.get('stream.adapterAddress')\n    const adapterContract = new web3.eth.Contract(streamAdapterABI, adapterAddress)\n    // console.log(adapterContract)\n    window.adapter = adapterContract\n    const schedules = await adapterContract.methods.getSchedules().call()\n    // console.log(schedules)\n    return schedules\n}\n\nexport const recoverStreams = async function(destAddress) {\n    const { store } = this.props\n    const web3 = store.get('web3')\n    const schedules = await getStreams.bind(this)()\n    const beneficiary = web3.utils.fromAscii(destAddress)\n    const network = store.get('selectedNetwork')\n    const transactions = store.get('stream.transactions').filter(t => t.network === network)\n\n    schedules.map(s => {\n        const alreadyExists = streamExists(transactions, web3.utils.toAscii(s.beneficiary), s.startTime)\n        // console.log(s.beneficiary)\n        if (s.beneficiary === beneficiary && !alreadyExists) {\n            const amount = new BigNumber(s.amount)\n            const tx = {\n                id: 'tx-' + Math.random().toFixed(6),\n                network,\n                type: 'stream',\n                instant: false,\n                awaiting: '',\n                source: 'btc',\n                dest: 'eth',\n                destAddress,\n                amount: amount.div(10 ** 8).toNumber(),\n                startTime: s.startTime,\n                duration: s.duration,\n                error: false,\n                txHash: '',\n                schedule: s,\n                claimTransactions: []\n            }\n\n            addTx(store, tx)\n        } else {\n            // show no results ui\n        }\n    })\n}\n\nexport const calculateStreamProgress = function(tx) {\n    const schedule = tx.schedule\n\n    if (schedule) {\n        const start = Number(schedule.startTime)\n        const now = Math.floor(Date.now() / 1000)\n        const end = Number(schedule.startTime) + (Number(schedule.duration * 60))\n        const period = end - start\n        let totalClaimablePercentrage = 0\n        let amountClaimedPercentage = 0\n        if (now > end) {\n            totalClaimablePercentrage = 100\n        } else {\n            totalClaimablePercentrage = Number((((now - start) / period) * 100).toFixed(1))\n        }\n        amountClaimedPercentage = Number(((schedule.amountClaimed / schedule.amount) * 100).toFixed(1))\n        const amountClaimablePercentage = Number((totalClaimablePercentrage - amountClaimedPercentage).toFixed(1))\n\n        const amount = tx.schedule ? (tx.schedule.amount / (10 ** 8)).toFixed(6) : 0\n        const totalClaimableAmount = amount * (totalClaimablePercentrage / 100)\n        const claimedAmount = Number(amount * (amountClaimedPercentage / 100))\n        const claimableAmount = Number(amount * (amountClaimablePercentage / 100))\n\n        return {\n            amount,\n            totalClaimablePercentrage,\n            totalClaimableAmount,\n            amountClaimedPercentage,\n            claimedAmount,\n            amountClaimablePercentage,\n            claimableAmount,\n            remaingDuration: end - start\n        }\n    } else {\n        return {\n            amount: 0,\n            totalClaimablePercentrage: 0,\n            totalClaimableAmount: 0,\n            amountClaimedPercentage: 0,\n            claimedAmount: 0,\n            amountClaimablePercentage: 0,\n            claimableAmount: 0,\n            remaingDuration: 0\n        }\n    }\n\n\n}\n\nexport const updateStreamInfo = async function(tx) {\n    const { store } =  this.props\n    const web3 = store.get('web3')\n    const { startTime, destAddress } = tx\n\n    const beneficiary = web3.utils.fromAscii(destAddress)\n    const schedules = await getStreams.bind(this)()\n\n    const schedule = schedules.filter(s => (\n        Number(s.startTime) === Number(startTime) &&\n        s.beneficiary === beneficiary\n    ))[0]\n\n    console.log('schedule', schedule, schedules)\n\n    if (schedule && schedule.beneficiary) {\n        // console.log('updateStreamInfo', schedules, schedule)\n        const sched = {\n            id: schedule.id,\n            beneficiary: schedule.beneficiary,\n            startTime: schedule.startTime,\n            duration: schedule.duration,\n            amount: schedule.amount,\n            amountClaimed: schedule.amountClaimed,\n            minutesClaimed: schedule.minutesClaimed\n        }\n        // in-case tx was never updated\n        let newTx = Object.assign(tx, {\n            awaiting: '',\n            error: false\n        })\n        newTx.schedule = sched\n        updateTx(store, tx, newTx)\n        return newTx\n    }\n}\n\nexport const claim = async function(tx) {\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    const web3Context = store.get('web3Context')\n\n    const adapterAddress = store.get('stream.adapterAddress')\n    const { destAddress, schedule } = tx\n\n    store.set('stream.claimRequesting', true)\n\n    const {\n        totalClaimablePercentrage,\n        amountClaimedPercentage\n    } = calculateStreamProgress(tx)\n\n    const claimAmount = (((totalClaimablePercentrage - amountClaimedPercentage) / 100) * tx.amount).toFixed(6)\n\n    const adapterContract = new web3.eth.Contract(streamAdapterABI, adapterAddress)\n    const gasPrice = await web3Context.lib.eth.getGasPrice()\n\n    console.log('gasPrice', gasPrice)\n\n    // console.log('claiming tx', tx, schedule, schedule.id)\n\n    return new Promise(async (resolve, reject) => {\n        try {\n            const result = await adapterContract.methods.claim(\n                schedule.id\n            ).send({\n                from: web3Context.accounts[0],\n                gasPrice: Math.round(gasPrice * 1.5),\n                gasLimit: 150000\n            }).on('transactionHash', (hash) => {\n                updateTx(store, Object.assign(tx, {\n                    claimTransactions: tx.claimTransactions.concat([{\n                        timestamp: Date.now(),\n                        amount: claimAmount,\n                        txHash: hash,\n                        network: tx.network\n                    }])\n                }))\n            }).on('confirmation', (confirmationNumber, receipt) => {\n                if (confirmationNumber === 1) {\n                    store.set('stream.claimRequesting', false)\n                    console.log('confirmation', confirmationNumber, receipt)\n                    updateStreamInfo.bind(this)(tx)\n                    resolve()\n                }\n            })\n            // console.log('result', result)\n        } catch(e) {\n            console.log('error completing', e)\n            store.set('stream.claimRequesting', false)\n            reject()\n        }\n    })\n}\n\nexport const completeDeposit = async function(tx) {\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    const web3Context = store.get('web3Context')\n    const pendingShiftIns = store.get('pendingShiftIns')\n\n    // const adapterAddress = store.get('adapterAddress')\n    const { id, type, params, awaiting, renResponse, renSignature } = tx\n\n    let adapterContract\n    if (type === 'swap') {\n        adapterContract = new web3.eth.Contract(adapterABI, store.get('swap.adapterAddress'))\n    } else if (type === 'stream') {\n        adapterContract = new web3.eth.Contract(streamAdapterABI, store.get('stream.adapterAddress'))\n    }\n\n    const gasPrice = await web3Context.lib.eth.getGasPrice()\n\n    console.log('gasPrice', gasPrice)\n\n    updateTx(store, Object.assign(tx, { awaiting: 'eth-settle' }))\n\n    console.log('completeDeposit', tx)\n\n    try {\n        let result\n        if (type === 'swap') {\n            result = await adapterContract.methods.shiftInWithSwap(\n                params.contractCalls[0].contractParams[0].value,\n                Number(params.sendAmount),\n                renResponse.autogen.nhash,\n                renSignature\n            ).send({\n                from: web3Context.accounts[0],\n                gasPrice: Math.round(gasPrice * 1.5),\n                gasLimit: 200000\n            })\n        } else if (type === 'stream') {\n            result = await adapterContract.methods.addVestingSchedule(\n                params.contractCalls[0].contractParams[0].value,\n                params.contractCalls[0].contractParams[1].value,\n                Number(params.contractCalls[0].contractParams[2].value),\n                Number(params.sendAmount),\n                renResponse.autogen.nhash,\n                renSignature\n            ).send({\n                from: web3Context.accounts[0],\n                gasPrice: Math.round(gasPrice * 1.5),\n                gasLimit: 350000\n            })\n            await updateStreamInfo.bind(this)(tx)\n        }\n        store.set('pendingShiftIns', pendingShiftIns.filter(p => p !== id))\n        updateTx(store, Object.assign(tx, { awaiting: '', txHash: result.transactionHash, error: false }))\n    } catch(e) {\n        console.log(e)\n        updateTx(store, Object.assign(tx, { error: true }))\n    }\n}\n\nexport const initShiftIn = function(tx) {\n    const {\n      type,\n      amount,\n      renBtcAddress,\n      params,\n      ethSig,\n      destAddress,\n      // stream\n      startTime,\n      duration\n    } = tx\n    const {\n        sdk,\n        web3\n    } = this.props.store.getState()\n\n    let adapterAddress = ''\n    let contractFn = ''\n    let contractParams = []\n\n    if (type === 'swap') {\n        adapterAddress = this.props.store.get('swap.adapterAddress')\n        contractFn = 'shiftInWithSwap'\n        contractParams = [\n            {\n                name: \"_to\",\n                type: \"address\",\n                value: destAddress\n            }\n        ]\n    } else if (type === 'stream') {\n        adapterAddress = this.props.store.get('stream.adapterAddress')\n        contractFn = 'addVestingSchedule'\n        contractParams = [\n            {\n                name: \"_beneficiary\",\n                type: \"bytes\",\n                value: web3.utils.fromAscii(destAddress),\n            },\n            {\n                name: \"_startTime\",\n                type: \"uint256\",\n                value: startTime,\n            },\n            {\n                name: \"_duration\",\n                type: \"uint16\",\n                value: duration,\n            }\n        ]\n    }\n\n    // // store data or update params with nonce\n    const data = {\n        sendToken: RenJS.Tokens.BTC.Btc2Eth,\n        sendAmount: RenJS.utils.value(amount, \"btc\").sats(), // Convert to Satoshis\n        sendTo: adapterAddress,\n        contractFn,\n        contractParams,\n        nonce: params && params.nonce ? params.nonce : RenJS.utils.randomNonce(),\n    }\n\n    const shiftIn = sdk.shiftIn(data)\n\n    window.shiftIns.push(shiftIn)\n\n    return shiftIn\n}\n\nexport const initDeposit = async function(tx) {\n    const { store }  = this.props\n    const {\n        id,\n        params,\n        awaiting,\n        renResponse,\n        renSignature,\n        error,\n        btcConfirmations\n    } = tx\n\n    const pendingShiftIns = store.get('pendingShiftIns')\n    if (pendingShiftIns.indexOf(id) < 0) {\n        store.set('pendingShiftIns', pendingShiftIns.concat([id]))\n    }\n\n    // console.log('initDeposit', tx)\n\n    console.log('initDeposit', tx)\n\n    // completed\n    if (!awaiting) return\n\n    // clear error when re-attempting\n    if (error) {\n        updateTx(store, Object.assign(tx, { error: false }))\n    }\n\n    // ren already exposed a signature\n    if (renResponse && renSignature && !error) {\n        completeDeposit.bind(this)(tx)\n    } else {\n        // create or re-create shift in\n        const shiftIn = await initShiftIn.bind(this)(tx)\n\n        // console.log('initDeposit shiftin', shiftIn)\n\n        if (!params) {\n            addTx(store, Object.assign(tx, {\n                params: shiftIn.params,\n                renBtcAddress: shiftIn.addr()\n            }))\n        }\n\n        // wait for btc\n        const deposit = await shiftIn\n            .waitForDeposit(2)\n            .on(\"deposit\", dep => {\n                // console.log('on deposit', dep)\n                if (dep.utxo) {\n                    if (awaiting === 'btc-init') {\n                        updateTx(store, Object.assign(tx, {\n                            awaiting: 'btc-settle',\n                            btcConfirmations: dep.utxo.confirmations,\n                            btcTxHash: dep.utxo.txid\n                        }))\n                    } else {\n                        updateTx(store, Object.assign(tx, {\n                            btcConfirmations: dep.utxo.confirmations,\n                            btcTxHash: dep.utxo.txid\n                        }))\n                    }\n                }\n            })\n\n        updateTx(store, Object.assign(tx, { awaiting: 'ren-settle' }))\n\n        try {\n            const signature = await deposit.submitToRenVM();\n            updateTx(store, Object.assign(tx, {\n                renResponse: signature.response,\n                renSignature: signature.signature\n            }))\n\n            completeDeposit.bind(this)(tx)\n        } catch(e) {\n            console.log(e)\n        }\n    }\n}\n\nexport const initInstantSwap = async function(tx) {\n    const { store }  = this.props\n    const { params, awaiting, renResponse, renSignature, error } = tx\n\n    const address = store.get('swap.address')\n    const amount = store.get('swap.amount')\n\n    const request = await fetch(`${API_URL}/swap-gateway/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            sourceAmount: amount,\n            sourceAsset: 'BTC',\n            destinationAsset: 'ETH',\n            destinationAddress: address\n        })\n    })\n    const data = await request.json()\n    addTx(store, Object.assign(tx, {\n        renBtcAddress: data.gatewayAddress\n    }))\n}\n\nexport const initInstantMonitoring = function() {\n    const store = this.props.store\n    const network = store.get('selectedNetwork')\n\n    swapMonitor = setInterval(async () => {\n        const transactions = store.get('swap.transactions').filter(t => t.network === network)\n        transactions.filter((t) => (t.instant && t.awaiting === 'btc-init')).map(async tx => {\n            const req = await fetch(`${API_URL}/swap-gateway/status?gateway=${tx.renBtcAddress}`, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            const data = await req.json()\n            if (data.status === 'complete') {\n                updateTx(this.props.store, Object.assign(tx, {\n                    awaiting: '',\n                    txHash: data.txHash\n                }))\n            }\n        })\n    }, 1000)\n}\n\nexport const initMonitoring = function() {\n    const store = this.props.store\n    const network = store.get('selectedNetwork')\n    const pendingShiftIns = store.get('pendingShiftIns')\n    const txs = store.get('swap.transactions').concat(store.get('stream.transactions')).filter(t => t.network === network)\n\n    txs.map(tx => {\n        if (tx.awaiting && !tx.instant) {\n            if (pendingShiftIns.indexOf(tx.id) < 0) {\n                initDeposit.bind(this)(tx)\n            }\n        } else if (tx.type === 'stream') {\n            updateStreamInfo.bind(this)(tx)\n        }\n    })\n}\n\nwindow.shiftIns = []\n\nexport default {\n    addTx,\n    updateTx,\n    removeTx,\n    completeDeposit,\n    initShiftIn,\n    initDeposit,\n    initMonitoring\n}\n","import RenJS from \"@renproject/ren\";\nimport {\n    fromConnection,\n    ephemeral\n} from \"@openzeppelin/network/lib\";\n\nimport {\n    initMonitoring,\n    initInstantMonitoring,\n    SWAP_ADAPTER_TEST,\n    SWAP_ADAPTER_MAIN,\n    STREAM_ADAPTER_TEST,\n    STREAM_ADAPTER_MAIN\n} from './txUtils'\n\n\nconst REACT_APP_TX_FEE = 100;\nconst signKey = ephemeral();\nconst relay_client_config = {\n  txfee: REACT_APP_TX_FEE,\n  verbose: true\n};\n\nexport const initNetworking = async function(network) {\n    const { store } = this.props\n\n    const web3Context = await fromConnection(\n        `https://${network === 'testnet' ? 'kovan' : 'mainnet'}.infura.io/v3/7be66f167c2e4a05981e2ffc4653dec2`,\n        {\n            gsn: { signKey, ...relay_client_config }\n        }\n    )\n\n    store.set('web3Context', web3Context)\n    store.set('web3', web3Context.lib)\n\n    const sdk = new RenJS(network)\n    store.set('sdk', sdk)\n\n    store.set('swap.adapterAddress', network === 'testnet' ? SWAP_ADAPTER_TEST : SWAP_ADAPTER_MAIN)\n    store.set('stream.adapterAddress', network === 'testnet' ? STREAM_ADAPTER_TEST : STREAM_ADAPTER_MAIN)\n\n    // turn instant off\n    store.set('swap.instantSwapSelected', false)\n}\n\nexport const initLocalTransactions = async function() {\n    const { store } = this.props\n    const swaps = localStorage.getItem('swap.transactions')\n    const streams = localStorage.getItem('stream.transactions')\n\n    if (swaps) {\n        store.set('swap.transactions', JSON.parse(swaps))\n    }\n\n    if (streams) {\n        store.set('stream.transactions', JSON.parse(streams))\n    }\n}\n\nexport const switchNetwork = async function(network) {\n    const { store } = this.props\n    store.set('selectedNetwork', network)\n    await initNetworking.bind(this)(network)\n    initLocalTransactions.bind(this)()\n    initMonitoring.bind(this)()\n    initInstantMonitoring.bind(this)()\n}\n\n\nexport default {\n    initNetworking,\n    initLocalTransactions\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            light: '#000',\n            main: '#000',\n            dark: '#000',\n            contrastText: '#fff',\n        },\n        // primary: blueGrey,\n        secondary: grey,\n    },\n    overrides: {\n        // Style sheet name ⚛️\n        // MuiButton: {\n        //   // Name of the rule\n        //   text: {\n        //     // Some CSS\n        //     color: 'white',\n        //   },\n        // }\n        PrivateNotchedOutline: {\n            root: {\n            }\n        },\n        // '.MuiOutlinedInput-root:hover':{\n        //     borderColor: '#EBEBEB !important'\n        // },\n        MuiOutlinedInput: {\n            root:{\n                '& input': {\n                    // minHeight: 32\n                },\n            //     '&:hover': {\n            //         // notchedOutline: {\n            //             borderColor: '#EBEBEB'\n            //         // }\n            //     }\n            },\n            notchedOutline: {\n                borderColor: '#eee !important',\n                borderWidth: '1px !important'\n            }\n        },\n        MuiTextField: {\n\n        },\n        MuiToggleButtonGroup: {\n          grouped: {\n            '&:not(:first-child)': {\n              borderLeft: '1px solid #EBEBEB'\n            }\n          }\n        },\n        // .MuiToggleButtonGroup-grouped:not(:first-child)\n        MuiToggleButton: {\n            root: {\n                border: '1px solid #EBEBEB',\n                backgroundColor: '#fff',\n                '&.Mui-selected': {\n                    // back\n                    backgroundColor: '#fff !important',\n                    color: '#000',\n                    fontWeight: '500',\n                    '&:hover': {\n                        backgroundColor: '#fff !important',\n                    }\n                },\n                '&:hover': {\n                    backgroundColor: '#fff !important',\n                }\n            }\n        }\n    }\n});\n","import React from 'react';\nimport Web3 from \"web3\";\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\n\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport WifiIcon from '@material-ui/icons/Wifi';\n\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\n\n\nconst styles = () => ({\n    navContainer: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(1),\n        minHeight: 52\n    },\n    logo: {\n        height: 22,\n        width: 25,\n        marginRight: theme.spacing(1)\n    },\n    accountButton: {\n      '& svg': {\n        marginRight: theme.spacing(1)\n      }\n    }\n})\n\nclass NavContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        const walletAddress = store.get('walletAddress')\n        const isSignedIn = walletAddress && walletAddress.length\n\n        console.log(this.props, this.state, this.props.store.getState())\n\n        return <Grid item xs={12}>\n            {<Grid className={classes.navContainer} container alignItems='center'>\n              <Grid item xs={6}>\n                  <Grid container alignItems='center'>\n                      <Typography variant='h6'>RenVM Interoperability</Typography>\n                  </Grid>\n              </Grid>\n            </Grid>}\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(NavContainer))\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\n\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Hidden from '@material-ui/core/Hidden';\n\n\nimport { withRouter } from \"react-router\";\n\nimport RenVMLogo from '../assets/renvm-logo.svg'\n\nconst styles = () => ({\n    tabs: {\n        paddingTop: theme.spacing(2),\n        paddingRight: theme.spacing(4),\n        '& .MuiTabs-flexContainer': {\n            alignItems: 'flex-end',\n        },\n        '& .MuiTab-wrapper': {\n            alignItems: 'flex-end',\n            // paddingRight: theme.spacing(1)\n        },\n        '& span.MuiTabs-indicator': {\n            backgroundColor: 'transparent'\n        },\n        '& button.MuiTab-textColorInherit': {\n            color: '#7f7f7f',\n        },\n        '& button.MuiTab-textColorInherit.Mui-selected': {\n            color: '#333',\n        },\n        width: '100%'\n    },\n    tabsMobile: {\n        // paddingTop: theme.spacing(2),\n        // paddingRight: theme.spacing(4),\n        '& .MuiTabs-flexContainer': {\n            alignItems: 'flex-end',\n        },\n        '& .MuiTab-wrapper': {\n            alignItems: 'flex-end',\n            // paddingRight: theme.spacing(1)\n        },\n        '& span.MuiTabs-indicator': {\n            backgroundColor: 'transparent'\n        },\n        '& button.MuiTab-textColorInherit': {\n            color: '#7f7f7f',\n        },\n        '& button.MuiTab-textColorInherit.Mui-selected': {\n            color: '#333',\n        },\n        // width: '100%'\n    },\n    logo: {\n        width: 120,\n        height: 'auto',\n        marginRight: theme.spacing(5.5)\n    },\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-end',\n        paddingTop: theme.spacing(4),\n        [theme.breakpoints.down('xs')]: {\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            flexDirection: 'row',\n            paddingTop: theme.spacing(2),\n        }\n    },\n    networkChooser: {\n        marginRight: theme.spacing(5.5),\n        marginTop: theme.spacing(1)\n    }\n})\n\n\n\nclass ActionTabsContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = props.store.getState()\n    }\n\n    componentWillMount() {\n        // const { location, store } = this.props\n        // if (location.pathname && location.pathname.match(/stream/)) {\n        //     store.set('selectedActionTab', 'stream')\n        // }\n    }\n\n    changeTabs(value) {\n        const { store } = this.props\n        store.set('selectedActionTab', value)\n    }\n\n    render() {\n        const {\n            classes,\n            store,\n            history\n        } = this.props\n\n        // console.log(this.props, this.state)\n\n        return <div className={classes.container}>\n            <img className={classes.logo} src={RenVMLogo} />\n            <Hidden xsDown>\n                <Tabs\n                    orientation=\"vertical\"\n                    value={store.get('selectedActionTab')}\n                    onChange={(e, value) => {\n                        this.changeTabs.bind(this)(value)\n                        // history.push(value === 'exchange' ? '/' : '/stream')\n                    }}\n                    className={classes.tabs}\n                  >\n                    <Tab value={'exchange'} label=\"Exchange\" />\n                    <Tab value={'stream'} label=\"Stream\" />\n                </Tabs>\n            </Hidden>\n            <Hidden smUp>\n                <Tabs\n                    value={store.get('selectedActionTab')}\n                    onChange={(e, value) => {\n                        this.changeTabs.bind(this)(value)\n                        // history.push(value === 'exchange' ? '/' : '/stream')\n                    }}\n                    className={classes.tabsMobile}\n                  >\n                    <Tab value={'exchange'} label=\"Exchange\" />\n                    <Tab value={'stream'} label=\"Stream\" />\n                </Tabs>\n            </Hidden>\n        </div>\n    }\n}\n\nexport default withStyles(styles)(withStore(ActionTabsContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\nimport { withStyles } from '@material-ui/styles';\n\nimport Select from '@material-ui/core/Select';\n\nimport { switchNetwork } from '../utils/networkingUtils'\n\nconst styles = () => ({\n    container: {\n        fontSize: 14\n    }\n})\n\nfunction NetworkChooser(props){\n    const { currentNetwork, onChange, classes } = props\n    return <Select\n        native\n        value={currentNetwork}\n        className={classes.container}\n        onChange={onChange}\n        inputProps={{\n            name: '',\n            id: 'age-native-simple',\n        }}>\n        <option value=\"chaosnet\">Chaosnet</option>\n        <option value=\"testnet\">Testnet</option>\n    </Select>\n}\n\nexport default withStyles(styles)(NetworkChooser);\n","import React from 'react';\nimport theme from '../theme/theme'\n// import classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = () => ({\n})\n\nconst StreamTransactionStatus = function(props) {\n    const {\n        tx,\n    } = props\n\n    return <React.Fragment>\n            {tx.awaiting === 'btc-init' ? <span>\n                {`Waiting for BTC transaction to be initiated `}<br />{`${tx.renBtcAddress}`}\n            </span> : null}\n            {tx.awaiting === 'btc-settle' ? <span>\n                {`BTC transaction confirming (${tx.btcConfirmations}/${'2'} complete)`}\n            </span> : null}\n            {tx.awaiting === 'ren-settle' ? <span>\n                {`Submitting to RenVM`}\n            </span> : null}\n            {tx.awaiting === 'eth-settle' ? <span>\n                {`Submitting to Ethereum`}\n            </span> : null}\n            {!tx.awaiting ? <span>{`Swap complete`}</span> : null}\n    </React.Fragment>\n}\n\nexport default withStyles(styles)(StreamTransactionStatus);\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\n\nimport BigNumber from \"bignumber.js\";\nimport RenJS from \"@renproject/ren\";\n\nimport {\n    fromConnection,\n    ephemeral\n} from \"@openzeppelin/network/lib\";\n\nimport {\n    switchNetwork\n} from '../utils/networkingUtils'\n\nimport NetworkChooser from '../components/NetworkChooser'\nimport SwapTransactionStatus from '../components/SwapTransactionStatus'\n\nimport {\n    initDeposit,\n    initMonitoring,\n    initInstantMonitoring,\n    removeTx,\n    updateTx,\n    initInstantSwap\n} from '../utils/txUtils'\n\nconst REACT_APP_TX_FEE = 100;\nconst signKey = ephemeral();\n// const gasPrice = 10000000000;\nconst relay_client_config = {\n  txfee: REACT_APP_TX_FEE,\n  // force_gasPrice: gasPrice, //override requested gas price\n  // gasPrice: gasPrice, //override requested gas price\n  // force_gasLimit: 200000, //override requested gas limit.\n  // gasLimit: 200000, //override requested gas limit.\n  verbose: true\n};\n\n\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n  },\n  navContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    minHeight: 52\n  },\n  contentContainer: {\n      // boxShadow: '0px 0px 30px 0px rgba(0, 0, 0, 0.05)',\n      borderRadius: theme.shape.borderRadius,\n      border: '1px solid #7f7f7f',\n      padding: theme.spacing(3),\n\n      // marginTop: theme.spacing(4),\n      marginBottom: theme.spacing(3),\n      '& input': {\n      }\n  },\n  input: {\n      marginBottom: theme.spacing(2),\n      width: '100%',\n      '& input': {\n          fontSize: 12\n      },\n      '& p': {\n          fontSize: 12\n      },\n      '& .MuiOutlinedInput-notchedOutline': {\n          borderColor: 'rgba(0, 0, 0, 0.5) !important'\n      }\n  },\n  amountContainer: {\n    paddingRight: theme.spacing(1)\n  },\n  amount: {\n  },\n  title: {\n      fontSize: 16,\n      fontWeight: 500,\n      marginTop: theme.spacing(4)\n  },\n  unfinished: {\n      // marginTop: theme.spacing(3)\n  },\n  depositItem: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1)\n  },\n  depositStatus: {\n      display: 'flex',\n      justifyContent: 'space-between'\n  },\n  info: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1),\n      '& p': {\n          marginBottom: 0\n      }\n  },\n  divider: {\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor: '#999999'\n  },\n  desc: {\n      marginBottom: theme.spacing(4),\n      fontSize: 14,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n  },\n  btcLink: {\n      fontSize: 12\n  },\n  viewLink: {\n      fontSize: 12,\n      marginRight: theme.spacing(1),\n  },\n  actionTabs: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n  },\n  swapButtonContainer: {\n      textAlign: 'center',\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n  },\n  switchContainer: {\n      textAlign: 'center',\n      paddingBottom: theme.spacing(1),\n      '& .MuiFormControlLabel-label': {\n          fontSize: 12\n      }\n  },\n  swapButton: {\n  }\n})\n\nclass Ellipsis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            string: ''\n        }\n        this.interval = null\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const string = this.state.string\n            if (string.length < 3) {\n                this.setState({ string: (string + '.') })\n            } else {\n                this.setState({ string: '' })\n            }\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return <span>{this.state.string}</span>\n    }\n}\n\nclass DepositContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.swapMonitor)\n    }\n\n    async start() {\n        const { store } = this.props\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n        const transactions = store.get('swap.transactions')\n        const network = store.get('selectedNetwork')\n\n        const tx = {\n            id: 'tx-' + Math.floor(Math.random() * (10 ** 16)),\n            network,\n            type: 'swap',\n            instant: false,\n            awaiting: 'btc-init',\n            destAddress: address,\n            amount: amount,\n            error: false,\n            txHash: ''\n        }\n\n        initDeposit.bind(this)(tx)\n    }\n\n    async startInstant() {\n        const { store } = this.props\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n        const transactions = store.get('swap.transactions')\n        const network = store.get('selectedNetwork')\n\n        const tx = {\n            id: 'tx-' + Math.floor(Math.random() * (10 ** 16)),\n            network,\n            type: 'swap',\n            instant: true,\n            awaiting: 'btc-init',\n            destAddress: address,\n            amount: amount,\n            error: false,\n            txHash: ''\n        }\n\n        initInstantSwap.bind(this)(tx)\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        const network = store.get('selectedNetwork')\n        const adapterAddress = store.get('swap.adapterAddress')\n        const instantSwapSelected = store.get('swap.instantSwapSelected')\n        const transactions = store.get('swap.transactions').filter(t => t.network === network)\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n        const showInstant = network === 'testnet'\n\n        console.log(store.getState())\n\n        const disabled = amount <= 0.0001 || (amount > 0.0005 && instantSwapSelected) || !address\n\n        return <Grid container>\n            {/*<Typography variant={'h1'} className={classes.title}>Kovan ETH – Testnet BTC Exchange</Typography>*/}\n\n            <Grid item xs={12} className={classes.contentContainer}>\n                <Grid container direction='row'>\n                    <Grid className={classes.desc} item xs={12}>\n                        <span >Swap BTC for ETH</span>\n                        <NetworkChooser\n                            currentNetwork={network}\n                            onChange={(e) => {\n                                switchNetwork.bind(this)(e.target.value)\n                            }} />\n                        {/*<span className={classes.btcLink}>Send testnet BTC from <a target='_blank' href={'https://tbtc.bitaps.com/'}>here</a></span>*/}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container>\n                            <Grid item xs={4} className={classes.amountContainer}>\n                                <TextField className={classNames(classes.input, classes.amount)}\n                                    variant='outlined'\n                                    size='small'\n                                    placeholder='0.000000'\n                                    onChange={e => {\n                                        store.set('swap.amount', e.target.value)\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment className={classes.endAdornment} position=\"end\">BTC</InputAdornment>\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={8}>\n                                <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Send to ETH Address' onChange={e => {\n                                    store.set('swap.address', e.target.value)\n                                }}/>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                    <Grid item xs={12} className={classes.switchContainer}>\n                        {showInstant && <FormControlLabel control={<Switch checked={instantSwapSelected}\n                            color='primary'\n                            onChange={() => store.set('swap.instantSwapSelected', !instantSwapSelected)}\n                            value={\"instant\"} />} label=\"Faster swap (0 confirmations, 0.0005 BTC max)\" />}\n                    </Grid>\n                    <Grid item xs={12} className={classes.swapButtonContainer}>\n                        <Button disabled={disabled} className={classes.swapButton} variant='outlined' color='primary' onClick={instantSwapSelected ? this.startInstant.bind(this) : this.start.bind(this)}>Start Swap</Button>\n                    </Grid>\n                    {transactions && transactions.length ? <Grid item xs={12}><Divider className={classes.divider} /></Grid> : null}\n                    <Grid item xs={12} className={classes.unfinished}>\n                        {transactions && transactions.length ? transactions.map((tx, index) => {\n                                return <Grid key={index} container direction='row' className={classes.depositItem}>\n                                    <Grid item xs={3}>\n                                        {tx.amount} BTC\n                                    </Grid>\n                                    <Grid className={classes.depositStatus} item xs={9}>\n                                        <SwapTransactionStatus tx={tx} />\n                                        <div>\n                                            {tx.awaiting === 'btc-settle' ? <a className={classes.viewLink} target='_blank' href={`https://live.blockcypher.com/${tx.network === 'testnet' ? 'btc-testnet' : 'btc'}/tx/${tx.btcTxHash}`}>View transaction</a> : null}\n                                            {tx.awaiting === 'btc-init' || tx.error || !tx.awaiting ? <div>\n                                                {tx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://' + (tx.network === 'testnet' ? 'kovan.' : '') + 'etherscan.io/tx/'+tx.txHash}>View transaction</a> : null}\n                                                <a href='javascript:;' onClick={() => {\n                                                    removeTx(store, tx)\n                                                }}>{!tx.awaiting ? 'Clear' : 'Cancel'}</a></div> : null}\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            }) : null}\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            {<Grid item xs={12} className={classes.info}>\n                <p>\n                    <b className={classes.caption}>How it Works</b>\n                    <br/>\n                    <br/>\n                    This exchange uses <a target='_blank' href='https://renproject.io/'>RenVM</a>, <a target='_blank' href='https://uniswap.io/'>Uniswap</a>, and Open Zeppelin's <a target='_blank' href='https://gsn.openzeppelin.com/'>GSN</a> to facilitate trustless interoperabilty between Bitcoin and Ethereum. All swaps abstract ETH away from the user with the <b>GaaS pattern</b>, and faster swaps are faciliated using the <b>CaaS pattern</b>. To learn more, check out our interoperability tutorials below:\n                </p>\n                <p>\n                    <ul>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>GaaS Tutorial</a> | Gas-less transactions</li>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>CaaS tutorial</a> | Faster swaps via expedited confirmations</li>\n                    </ul>\n                </p>\n                <p>\n                    Swaps are submitted to the following adapter address: <a target='_blank' href={'https://' + (network === 'testnet' ? 'kovan.' : '') + 'etherscan.io/address/'+adapterAddress}>{adapterAddress}</a>\n                </p>\n                <p>\n                    To learn more about building interoperable applications like this with RenVM, check out our <a target='_blank' href='https://renproject.io/developers'>developer center</a> or the following links:\n                    <ul>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/ren-sdk'}>Getting started with RenJS</a></li>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/gateway-js'}>Getting started with GatewayJS</a></li>\n                        <li><a target='_blank' href={'https://github.com/renproject/ren/wiki'}>Github Spec</a></li>\n                    </ul>\n                </p>\n                <p>\n\n                </p>\n            </Grid>}\n\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(DepositContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\n// import classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n})\n\nconst StreamTransactionStatus = function(props) {\n    const {\n        tx,\n    } = props\n\n    const {\n        totalClaimablePercentrage,\n        amountClaimedPercentage\n    } = calculateStreamProgress(tx)\n\n    const complete = totalClaimablePercentrage === 100\n\n    return <React.Fragment>\n            {tx.awaiting === 'btc-init' ? <span>\n                {`Waiting for BTC transaction to be initiated`}\n            </span> : null}\n            {tx.awaiting === 'btc-settle' ? <span>\n                {`BTC transaction confirming (${tx.btcConfirmations}/${'2'} complete)`}\n            </span> : null}\n            {tx.awaiting === 'ren-settle' ? <span>\n                {tx.error ? `Error submitting to RenVM` : `Submitting to RenVM`}\n            </span> : null}\n            {tx.awaiting === 'eth-settle' ? <span>\n                {tx.error ? `Error submitting to Ethereum` : `Submitting to Ethereum`}\n            </span> : null}\n            {!tx.awaiting ? <span>{complete ? `Stream complete` : `Streaming in progress`}</span> : null}\n    </React.Fragment>\n}\n\nexport default withStyles(styles)(StreamTransactionStatus);\n","import React from 'react';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\n\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport StreamTransactionStatus from './StreamTransactionStatus'\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n    claimItem: {\n        fontSize: 12,\n        marginBottom: theme.spacing(1),\n        display: 'flex',\n        width: '100%'\n    },\n    depositStatus: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    links: {\n        '& a': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    progress: {\n        position: 'relative',\n        marginRight: theme.spacing(1),\n        width: 18,\n        height: 18\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n    info: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n})\n\nconst ClaimStreamTransaction = function(props) {\n    const {\n        tx,\n        index,\n        classes,\n    } = props\n\n    return <Grid className={classes.claimItem} key={index}>\n        <Grid item xs={4}>\n            <Grid container alignItems='center'>\n                <span>{tx.amount} BTC</span>\n            </Grid>\n        </Grid>\n        <Grid item xs={8} className={classes.info}>\n            <div className={classes.links}>\n                <a target='_blank' href={'https://'+ (tx.network === 'testnet' ? 'kovan.' : '') +'etherscan.io/tx/'+tx.txHash}className={classes.viewLink}>\n                    View transaction\n                </a>\n            </div>\n            <div>\n                <span>{(new Date(tx.timestamp).toLocaleString())}</span>\n            </div>\n        </Grid>\n    </Grid>\n}\n\nexport default withStyles(styles)(ClaimStreamTransaction);\n","import React from 'react';\nimport theme from '../../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\nimport { withStore } from '@spyna/react-store'\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CountUp from 'react-countup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n\nimport {\n    claim,\n    updateStreamInfo,\n    removeTx,\n    calculateStreamProgress,\n    MIN_CLAIM_AMOUNT\n} from '../../utils/txUtils'\nimport StreamTransactionStatus from '../../components/StreamTransactionStatus'\nimport ClaimStreamTransaction from '../../components/ClaimStreamTransaction'\n\nconst styles = () => ({\n    progress: {\n        position: 'relative',\n        margin: '0px auto',\n        width: 250,\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n    progressText: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        '& p': {\n            margin: '0px'\n        }\n        // paddingTop: theme.spacing(5)\n    },\n    totalStreamed: {\n        fontSize: 24,\n        paddingBottom: theme.spacing(2)\n    },\n    spinner: {\n        position: 'relative',\n        margin: '0px auto',\n        width: 24,\n        marginBottom: theme.spacing(2)\n    },\n    spinnerTop: {\n        color: '#eee',\n    },\n    spinnerBottom: {\n        color: theme.palette.primary.main,\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    awaitingStatus: {\n        textAlign: 'center',\n        paddingBottom: theme.spacing(4),\n        fontSize: 12\n    },\n    claimButton: {\n        // margin: '0px auto'\n        textAlign: 'center',\n        paddingBottom: theme.spacing(3),\n        '& span': {\n            fontSize: 12\n        }\n    },\n    input: {\n        marginBottom: theme.spacing(2),\n        width: '100%',\n        '& input': {\n            fontSize: 12\n        },\n        '& p': {\n            fontSize: 12\n        },\n        '& .MuiOutlinedInput-notchedOutline': {\n            borderColor: 'rgba(0, 0, 0, 0.5) !important'\n        }\n    },\n    hidden: {\n        display: 'none'\n    },\n    initContainer: {\n        // paddingTop: theme.spacing(3),\n        '& a': {\n            fontSize: 12\n        }\n    },\n    backLink: {\n        fontSize: 12,\n        marginBottom: theme.spacing(4)\n    },\n    loadingContianer: {\n        // paddingTop: theme.spacing(3)\n    },\n    depositAddress: {\n        fontSize: 12,\n        textAlign: 'center',\n        '& span': {\n            paddingBottom: theme.spacing(1)\n        }\n    },\n    address: {\n        minWidth: 300,\n        width: 'auto'\n    },\n    divider: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        backgroundColor: '#999999'\n    },\n    claims: {\n    }\n})\n\n// clean up logic in this component\nclass ViewStreamContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            totalClaimable: '',\n            amountClaimed: '',\n            amountClaimedPercentage: '',\n            availableAmount: '',\n            availablePercentage: '',\n            remaingDuration: ''\n        }\n        this.initAddressRef = React.createRef()\n        this.interval = null\n        this.scheduleInterval = null\n        this.mounted = false\n    }\n\n    async componentDidMount() {\n        const selectedTx = this.props.store.get('stream.selectedTx')\n        await updateStreamInfo.bind(this)(selectedTx)\n        this.setState({\n            loaded: true\n        })\n\n        if (this.initAddressRef.current) {\n            this.initAddressRef.current.value = selectedTx.renBtcAddress\n        }\n\n        // this.interval = setInterval(() => {\n        //     updateStreamInfo.bind(this)(selectedTx)\n        // }, 5000)\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval)\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n    back() {\n        const { store } = this.props\n        store.set('stream.activeView', 'start')\n        store.set('stream.selectedTx', null)\n        // console.log('back')\n    }\n\n    async claim() {\n        const { store } = this.props\n        const selectedTx = store.get('stream.selectedTx')\n        await claim.bind(this)(selectedTx)\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        const selectedTx = store.get('stream.selectedTx')\n\n        const {\n            loaded\n        } = this.state\n\n        const progress = calculateStreamProgress(selectedTx)\n\n        const {\n            totalClaimablePercentrage,\n            amountClaimedPercentage,\n            amountClaimablePercentage,\n            remaingDuration,\n            amount,\n            totalClaimableAmount,\n            claimedAmount,\n            claimableAmount,\n        } = progress\n\n        const { claimTransactions } = selectedTx\n        const claimRequesting = store.get('stream.claimRequesting')\n        const network = store.get('selectedNetwork')\n\n        console.log('progress', progress)\n\n        return <React.Fragment>\n            <div className={classes.backLink}>\n                <a href='javascript:;' onClick={this.back.bind(this)}>{'Back'}</a>\n            </div>\n            {!loaded ? <Grid item xs={12} className={classes.loadingContianer}>\n                <div className={classes.spinner}>\n                      <CircularProgress\n                        variant=\"determinate\"\n                        value={100}\n                        className={classes.spinnerTop}\n                        size={24}\n                        thickness={4}\n                      />\n                      <CircularProgress\n                        variant=\"indeterminate\"\n                        disableShrink\n                        className={classes.spinnerBottom}\n                        size={24}\n                        thickness={4}\n                      />\n                </div>\n            </Grid> :\n            <React.Fragment>\n                <Grid item xs={12} className={selectedTx.schedule ? classes.hidden : classes.initContainer}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <div className={classes.spinner}>\n                                  <CircularProgress\n                                    variant=\"determinate\"\n                                    value={100}\n                                    className={classes.spinnerTop}\n                                    size={24}\n                                    thickness={4}\n                                  />\n                                  <CircularProgress\n                                    variant=\"indeterminate\"\n                                    disableShrink\n                                    className={classes.spinnerBottom}\n                                    size={24}\n                                    thickness={4}\n                                  />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} className={classes.awaitingStatus}>\n                            <StreamTransactionStatus tx={selectedTx} />\n                            {(selectedTx.awaiting === 'btc-init' || selectedTx.error) &&\n                                <p><a href='javascript:;'\n                                    className={classes.cancelLink}\n                                    onClick={() => {\n                                        removeTx(store, selectedTx)\n                                        store.set('stream.selectedTx', null)\n                                        store.set('stream.activeView', 'start')\n                                    }}>\n                                    Cancel\n                                </a></p>}\n\n                            {selectedTx.awaiting === 'btc-settle' && <p><a target='_blank' href={`https://live.blockcypher.com/${network === 'testnet' ? 'btc-testnet' : 'btc'}/tx/${selectedTx.btcTxHash}`}\n                                className={classes.cancelLink}>\n                                View pending transaction\n                            </a></p>}\n                        </Grid>\n                        <Grid item xs={12} onClick={() => {}}>\n                            <Grid container justify='center'>\n                                {selectedTx.awaiting === 'btc-init' && <div className={classes.depositAddress}>\n                                    <p><span>{`Send ${selectedTx.amount} BTC to the following address:`}</span></p>\n                                    <TextField className={classNames(classes.input, classes.address)}\n                                        label={''}\n                                        variant='outlined'\n                                        size='small'\n                                        placeholder='Deposit Address'\n                                        inputRef={this.initAddressRef}/>\n                                </div>}\n                            </Grid>\n\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container justify='center'>\n                                {selectedTx.awaiting === 'btc-init' || selectedTx.error || !selectedTx.awaiting ? <div className={classes.cancelLink}>\n                                    {selectedTx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://'+ (network === 'testnet' ? 'kovan.' : '') +'etherscan.io/tx/'+selectedTx.txHash}>View transaction</a> : null}\n                                </div> : null}\n                                {/*<span  onClick={() => store.set('activeStreamView', 'start')}>Cancel</span>*/}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <div className={selectedTx.schedule && loaded ? classes.progressContainer : classes.hidden}>\n                    <Grid item xs={12}>\n                        <div className={classes.progress}>\n                              <CircularProgress\n                                variant=\"static\"\n                                value={100}\n                                className={classes.progressTop}\n                                size={250}\n                                thickness={2}\n                              />\n                              <CircularProgress\n                                variant=\"static\"\n                                className={classes.progressMiddle}\n                                size={250}\n                                value={Number(totalClaimablePercentrage)}\n                                thickness={2}\n                              />\n                              <CircularProgress\n                                variant=\"static\"\n                                className={classes.progressBottom}\n                                size={250}\n                                value={Number(amountClaimedPercentage)}\n                                thickness={2}\n                              />\n                        </div>\n                        <div className={classes.progressText}>\n                            <div>\n                                <p className={classes.totalStreamed}>\n                                    <b>{amount} BTC</b>\n                                </p>\n                            </div>\n                            <p>\n                                <b>{claimedAmount.toFixed(6)} / <CountUp start={totalClaimableAmount} end={selectedTx.amount} duration={remaingDuration} decimals={6}>{claimableAmount}</CountUp> BTC</b>\n                            </p>\n                            <p>\n                                <span>claimed</span>\n                            </p>\n                        </div>\n                    </Grid>\n                </div>\n                <Grid item xs={12} className={selectedTx.schedule && loaded ?classes.claimButton : classes.hidden}>\n                    {claimableAmount > MIN_CLAIM_AMOUNT ? <Button disabled={claimRequesting}\n                        className={''}\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => {\n                            this.claim.bind(this)()\n                        }}>\n                        {claimRequesting ? `Submitting transaction...` : `Claim ${claimableAmount.toFixed(6)} BTC`}\n                    </Button> : <span>{totalClaimablePercentrage < 100 ? `Minimum claim amount is ${MIN_CLAIM_AMOUNT} BTC` : 'All available funds claimed'}</span>}\n                </Grid>\n                {claimTransactions.length ? <Grid item xs={12}>\n                    <Divider className={classes.divider} />\n                </Grid> : null}\n                <div className={selectedTx.schedule && loaded ? classes.claimTransactions : classes.hidden}>\n                    {claimTransactions && claimTransactions.length ? claimTransactions.map((tx, index) => {\n                        return <ClaimStreamTransaction\n                            tx={tx}\n                            index={index}\n                            onView={t => {\n                            }}\n                            onCancel={t => {\n                            }}/>\n                    }) : null}\n                </div>\n            </React.Fragment>}\n        </React.Fragment>\n    }\n}\n\nexport default withStore(withStyles(styles)(ViewStreamContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\n\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport StreamTransactionStatus from './StreamTransactionStatus'\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n    depositItem: {\n        fontSize: 12,\n        marginBottom: theme.spacing(1)\n    },\n    depositStatus: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    links: {\n        '& a': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    progress: {\n        position: 'relative',\n        marginRight: theme.spacing(1),\n        width: 18,\n        height: 18\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n})\n\nconst StreamTransaction = function(props) {\n    // render() {\n        const {\n            tx,\n            index,\n            classes,\n            onView,\n            onCancel\n        } = props\n\n        const {\n            schedule\n        } = tx\n\n        const {\n            totalClaimablePercentrage,\n            amountClaimedPercentage\n        } = calculateStreamProgress(tx)\n\n        const completed = totalClaimablePercentrage === 100\n\n        return <Grid key={index}\n                  container\n                  direction='row'\n                  className={classes.depositItem}>\n            <Grid item xs={4}>\n                <Grid container alignItems='center'>\n                    <div className={classes.progress}>\n                          <CircularProgress\n                            variant=\"static\"\n                            value={100}\n                            className={classes.progressTop}\n                            size={18}\n                            thickness={4}\n                          />\n                          <CircularProgress\n                            variant=\"static\"\n                            className={classes.progressMiddle}\n                            size={18}\n                            value={totalClaimablePercentrage}\n                            thickness={4}\n                          />\n                          <CircularProgress\n                            variant=\"static\"\n                            className={classes.progressBottom}\n                            size={18}\n                            value={amountClaimedPercentage}\n                            thickness={4}\n                          />\n                    </div>\n                    <span>{tx.amount} BTC</span>\n                </Grid>\n            </Grid>\n            <Grid className={classes.depositStatus} item xs={8}>\n                <StreamTransactionStatus tx={tx} />\n                <div className={classes.links}>\n                    <a href='javascript:;' className={classes.viewLink} onClick={() => (onView(tx))}>\n                        View\n                    </a>\n                    {completed && <a href='javascript:;' className={classes.viewLink} onClick={() => (onCancel(tx))}>\n                        Clear\n                    </a>}\n\n                    {/*tx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://kovan.etherscan.io/tx/'+tx.txHash}>View transaction</a> : null*/}\n\n                    {/*tx.awaiting === 'btc-init' || tx.error ? <a href='javascript:;' onClick={() => {\n                        onCancel(tx)\n                    }}>Cancel</a> : null*/}\n                </div>\n            </Grid>\n        </Grid>\n    // }\n}\n\nexport default withStyles(styles)(StreamTransaction);\n","import React from 'react';\nimport theme from '../theme/theme'\nimport { withStyles } from '@material-ui/styles';\n\nimport Chip from '@material-ui/core/Chip'\nimport WarningIcon from '@material-ui/icons/Warning';\n\n\nconst styles = () => ({\n    container: {\n        fontSize: 12,\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    }\n})\n\nfunction Disclosure(props){\n    const { classes } = props\n    return <Chip\n        className={classes.container}\n        icon={<WarningIcon />}\n        label={<span><a href='https://chaos.renproject.io/' target='_blank'>Chaosnet</a> is unaudited and this project is in beta. Use at your own risk.</span>}\n    />\n}\n\nexport default withStyles(styles)(Disclosure);\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport validate from 'bitcoin-address-validation';\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../../theme/theme'\nimport classNames from 'classnames'\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport BigNumber from \"bignumber.js\";\nimport RenJS from \"@renproject/ren\";\n\nimport {\n    fromConnection,\n    ephemeral\n} from \"@openzeppelin/network/lib\";\n\nimport {\n    initDeposit,\n    initMonitoring,\n    initInstantMonitoring,\n    removeTx,\n    initInstantSwap,\n    recoverStreams\n} from '../../utils/txUtils'\n\nimport {\n    switchNetwork\n} from '../../utils/networkingUtils'\n\nimport ViewStream from './ViewStreamContainer'\nimport StreamTransaction from '../../components/StreamTransaction'\nimport NetworkChooser from '../../components/NetworkChooser'\nimport Disclosure from '../../components/Disclosure'\n\nconst REACT_APP_TX_FEE = 100;\nconst signKey = ephemeral();\n// const gasPrice = 10000000000;\nconst relay_client_config = {\n  txfee: REACT_APP_TX_FEE,\n  // force_gasPrice: gasPrice, //override requested gas price\n  // gasPrice: gasPrice, //override requested gas price\n  force_gasLimit: 200000, //override requested gas limit.\n  gasLimit: 200000, //override requested gas limit.\n  verbose: true\n};\n\n\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n  },\n  navContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    minHeight: 52\n  },\n  contentContainer: {\n      // boxShadow: '0px 0px 30px 0px rgba(0, 0, 0, 0.05)',\n      borderRadius: theme.shape.borderRadius,\n      border: '1px solid #7f7f7f',\n      padding: theme.spacing(3),\n\n      // marginTop: theme.spacing(4),\n      marginBottom: theme.spacing(3),\n      '& input': {\n      }\n  },\n  input: {\n      marginBottom: theme.spacing(2),\n      width: '100%',\n      '& input': {\n          fontSize: 12\n      },\n      '& p': {\n          fontSize: 12\n      },\n      '& .MuiOutlinedInput-notchedOutline': {\n          borderColor: 'rgba(0, 0, 0, 0.5) !important'\n      }\n  },\n  amountContainer: {\n    // paddingRight: theme.spacing(1)\n  },\n  amount: {\n  },\n  title: {\n      fontSize: 16,\n      fontWeight: 500,\n      marginTop: theme.spacing(4)\n  },\n  unfinished: {\n      // marginTop: theme.spacing(3)\n  },\n  depositItem: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1)\n  },\n  depositStatus: {\n      display: 'flex',\n      justifyContent: 'space-between'\n  },\n  info: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1),\n      '& p': {\n          marginBottom: 0\n      }\n  },\n  divider: {\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor: '#999999'\n  },\n  desc: {\n      marginBottom: theme.spacing(4),\n      fontSize: 14,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n  },\n  btcLink: {\n      fontSize: 12\n  },\n  viewLink: {\n      fontSize: 12,\n      marginRight: theme.spacing(1),\n  },\n  actionTabs: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n  },\n  swapButtonContainer: {\n      textAlign: 'center',\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n  },\n  switchContainer: {\n      textAlign: 'center',\n      paddingBottom: theme.spacing(1),\n      '& .MuiFormControlLabel-label': {\n          fontSize: 12\n      }\n  },\n  swapButton: {\n  },\n  radio: {\n      marginBottom: theme.spacing(2),\n      flexDirection: 'row',\n      '& span': {\n        fontSize: 12\n      }\n  },\n  searchLink: {\n      fontSize: 12,\n      minWidth: 80\n  }\n})\n\nclass Ellipsis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            string: ''\n        }\n        this.interval = null\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const string = this.state.string\n            if (string.length < 3) {\n                this.setState({ string: (string + '.') })\n            } else {\n                this.setState({ string: '' })\n            }\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return <span>{this.state.string}</span>\n    }\n}\n\nclass StreamContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        const { store } = this.props\n\n        const txs = localStorage.getItem('stream.transactions')\n\n        if (txs) {\n            store.set('stream.transactions', JSON.parse(txs))\n        }\n\n        // // monitor normal swaps\n        // initMonitoring.bind(this)()\n        //\n        // // monitor instant swaps\n        // initInstantMonitoring.bind(this)()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.swapMonitor)\n    }\n\n    async start() {\n        const { store } = this.props\n        const amount = store.get('stream.amount')\n        const address = store.get('stream.address')\n        const startTime = Math.round(Date.now() / 1000)\n        const duration = store.get('stream.duration')\n        const network = store.get('selectedNetwork')\n\n        const tx = {\n            id: 'tx-' + Math.random().toFixed(6),\n            network,\n            type: 'stream',\n            instant: false,\n            awaiting: 'btc-init',\n            btcConfirmations: 0,\n            btcTxHash: '',\n            destAddress: address,\n            amount: amount,\n            startTime,\n            duration,\n            error: false,\n            txHash: '',\n            claimTransactions: []\n        }\n\n        store.set('stream.selectedTx', tx)\n        store.set('stream.activeView', 'view-stream')\n\n        initDeposit.bind(this)(tx)\n    }\n\n    viewTx(tx) {\n        const { store } =  this.props\n\n        store.set('stream.selectedTx', tx)\n        store.set('stream.activeView', 'view-stream')\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        // console.log(store.getState())\n        const network = store.get('selectedNetwork')\n        const amount = store.get('stream.amount')\n        const address = store.get('stream.address')\n        const duration = store.get('stream.duration')\n        const transactions = store.get('stream.transactions').filter(t => t.network === network)\n        const activeView = store.get('stream.activeView')\n        const selectedTx = store.get('stream.selectedTx')\n        const searchAddress = store.get('stream.searchAddress')\n        const adapterAddress = store.get('stream.adapterAddress')\n\n        const validation = validate(address)\n        const validAddress = validation && !validation.bech32\n        const disabled = amount < 0.00011 || !address || !duration || !validAddress\n        // const disabled = false\n\n        return <Grid container>\n            <Grid item xs={12} className={classes.contentContainer}>\n                <Grid container direction='row'>\n                    {activeView === 'start' && <React.Fragment>\n                        <Grid className={classes.desc} item xs={12}>\n                            <span >Stream BTC</span>\n                            <NetworkChooser\n                                currentNetwork={network}\n                                onChange={(e) => {\n                                    switchNetwork.bind(this)(e.target.value)\n                                }} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.amountContainer}>\n                                    <TextField className={classNames(classes.input, classes.amount)}\n                                        variant='outlined'\n                                        size='small'\n                                        placeholder='0.000000'\n                                        onChange={e => {\n                                            store.set('stream.amount', e.target.value)\n                                        }}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment className={classes.endAdornment} position=\"end\">BTC</InputAdornment>\n                                        }}/>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Stream to BTC Address' onChange={e => {\n                                        store.set('stream.address', e.target.value)\n                                    }}/>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Duration in Minutes' onChange={e => {\n                                        store.set('stream.duration', e.target.value)\n                                    }}/>\n                                </Grid>\n                            </Grid>\n\n                        </Grid>\n                        <Grid item xs={12} className={classes.swapButtonContainer}>\n                            <Button disabled={disabled} className={classes.swapButton} variant='outlined' color='primary' onClick={this.start.bind(this)}>Start Stream</Button>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Divider className={classes.divider} />\n                        </Grid>\n                        <Grid item xs={12} className={classes.swapButtonContainer}>\n                            <TextField\n                                className={classNames(classes.input, classes.address)}\n                                variant='outlined'\n                                size='small'\n                                placeholder='Search by Destination Address'\n                                onChange={e => {\n                                    store.set('stream.searchAddress', e.target.value)\n                                }}\n                                InputProps={{\n                                    endAdornment: <InputAdornment\n                                        className={classes.searchLink}\n                                        position=\"end\">\n                                            <a href='javascript:;' onClick={() => {\n                                                recoverStreams.bind(this)(searchAddress)\n                                            }}>Get Streams</a>\n                                        </InputAdornment>\n                                }}/>\n                        </Grid>\n\n                        <Grid item xs={12} className={classes.unfinished}>\n                            {transactions && transactions.length ? transactions.map((tx, index) => {\n                                    return <StreamTransaction\n                                        tx={tx}\n                                        index={index}\n                                        onView={t => {\n                                            this.viewTx.bind(this)(t)\n                                        }}\n                                        onCancel={t => {\n                                            removeTx(store, t)\n                                        }}/>\n                                }) : null}\n                        </Grid>\n                    </React.Fragment>}\n                    {activeView === 'view-stream' && <Grid container direction='row'>\n                        <Grid item xs={12}>\n                            <ViewStream selectedTx={selectedTx} />\n                        </Grid>\n                    </Grid>}\n                </Grid>\n            </Grid>\n\n            {<Grid item xs={12} className={classes.info}>\n                <p>\n                    <b className={classes.caption}>How it Works</b>\n                    <br/>\n                    <br/>\n                    Streams use <a target='_blank' href='https://renproject.io/'>RenVM</a> and Open Zeppelin's <a target='_blank' href='https://gsn.openzeppelin.com/'>GSN</a> to facilitate trustless interoperabilty between Bitcoin and Ethereum. Active streams are held in a smart contract that allows anyone to shift out a valid amount of earned BTC to the recipient BTC address at any time.\n                </p>\n                <p>\n                    Streams are facilitated through the following adapter address: <a target='_blank' href={'https://'+ (network === 'testnet' ? 'kovan.' : '') +'etherscan.io/address/'+adapterAddress}>{adapterAddress}</a>\n                </p>\n                <p>\n                    To learn more about building interoperable applications like this with RenVM, check out our <a target='_blank' href='https://renproject.io/developers'>developer center</a> or the following links:\n                </p>\n                <ul>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>Bitcoin Payments Tutorial</a> | Scheduled Bitcoin Payments</li>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/ren-sdk'}>Getting started with RenJS</a></li>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/gateway-js'}>Getting started with GatewayJS</a></li>\n                    <li><a target='_blank' href={'https://github.com/renproject/ren/wiki'}>Github Spec</a></li>\n                </ul>\n            </Grid>}\n\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(StreamContainer))\n","import React from 'react';\nimport { createStore, withStore } from '@spyna/react-store'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport {\n    initMonitoring,\n    initInstantMonitoring,\n    updateTx,\n    SWAP_ADAPTER_TEST,\n    STREAM_ADAPTER_TEST\n} from './utils/txUtils'\n\nimport {\n    initNetworking,\n    initLocalTransactions,\n} from './utils/networkingUtils'\n\n\nimport NavContainer from './containers/NavContainer'\nimport ActionTabsContainer from './containers/ActionTabsContainer'\nimport DepositContainer from './containers/DepositContainer'\nimport StreamContainer from './containers/Stream/StreamContainer'\nimport Disclosure from './components/Disclosure'\n\nimport theme from './theme/theme'\nimport classNames from 'classnames'\n\nimport { withStyles, ThemeProvider } from '@material-ui/styles';\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\n\n// import TabPanel from '@material-ui/core/TabPanel'\n\n\n\nconst styles = () => ({\n    warning: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(1),\n        width: '100%',\n        '& span': {\n            padding: theme.spacing(0.5),\n            whiteSpace: 'normal',\n            // fontSize: 12\n        },\n    }\n})\n\nconst initialState = {\n    'selectedActionTab': 'exchange',\n    'selectedNetwork': 'testnet',\n    'pendingShiftIns': [],\n    // exchange\n    'swap.transactions': [],\n    'swap.adapterAddress': SWAP_ADAPTER_TEST,\n    'swap.instantSwapSelected': false,\n    'swap.amount': '',\n    'swap.address': '',\n    // streaming\n    'stream.adapterAddress': STREAM_ADAPTER_TEST,\n    'stream.transactions': [],\n    'stream.amount': '',\n    'stream.destination': '',\n    'stream.duration': '',\n    'stream.activeView': 'start',\n    'stream.selectedTx': null,\n    'stream.searchAddress': '',\n    'stream.claimRequesting': false,\n}\n\n\nclass AppWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    async componentDidMount() {\n        await initNetworking.bind(this)('testnet')\n        initLocalTransactions.bind(this)()\n\n        // monitor normal swaps\n        initMonitoring.bind(this)()\n\n        // monitor instant swaps\n        initInstantMonitoring.bind(this)()\n\n        window.store = this.props.store\n\n        window.updateTx = updateTx.bind(this)\n    }\n\n    render(){\n        const { store, classes } = this.props\n        const {\n            selectedActionTab\n        } = store.getState()\n\n        return <Container maxWidth=\"lg\">\n            <Grid container>\n                {/*<Grid item xs={12}>\n                    <NavContainer />\n                </Grid>*/}\n                <Grid item xs={12} sm={3} md={3}>\n                    <ActionTabsContainer />\n                </Grid>\n                <Grid className={classes.content} item xs={12} sm={9} md={6}>\n                    <div className={classes.warning}><Disclosure /></div>\n                    {selectedActionTab === 'exchange' && <DepositContainer />}\n                    {selectedActionTab === 'stream' && <StreamContainer />}\n                    {/*<Switch>\n                        <Route exact path=\"/\" component={<DepositContainer />}>\n                            {selectedActionTab === 'exchange' && <DepositContainer />}\n                        </Route>\n                        <Route path=\"/stream\">\n                            {selectedActionTab === 'swap' && <StreamContainer />}\n                        </Route>\n                    </Switch>*/}\n                </Grid>\n            </Grid>\n        </Container>\n    }\n}\n\nconst AppWrapperComponent = withStore(AppWrapper)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    async componentDidMount() {\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <ThemeProvider theme={theme}>\n                <AppWrapperComponent classes={classes}/>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default createStore(withStyles(styles)(App), initialState)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/renvm-logo.f545406f.svg\";"],"sourceRoot":""}