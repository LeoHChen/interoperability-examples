{"version":3,"sources":["theme/theme.js","containers/NavContainer.js","containers/ActionTabsContainer.js","components/SwapTransactionStatus.js","utils/txUtils.js","containers/DepositContainer.js","components/StreamTransactionStatus.js","components/ClaimStreamTransaction.js","containers/Stream/ViewStreamContainer.js","components/StreamTransaction.js","containers/Stream/StreamContainer.js","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","grey","overrides","PrivateNotchedOutline","root","MuiOutlinedInput","notchedOutline","borderColor","borderWidth","MuiTextField","MuiToggleButtonGroup","grouped","borderLeft","MuiToggleButton","border","backgroundColor","color","fontWeight","NavContainer","props","this","classes","walletAddress","store","get","length","console","log","state","getState","Grid","item","xs","className","navContainer","container","alignItems","Typography","variant","React","Component","withStyles","paddingTop","theme","spacing","paddingBottom","minHeight","logo","height","width","marginRight","accountButton","withStore","ActionTabsContainer","value","set","Tabs","orientation","onChange","e","changeTabs","bind","tabs","Tab","label","paddingRight","tx","Fragment","awaiting","renBtcAddress","btcConfirmations","addTx","storeString","type","txs","push","localStorage","setItem","JSON","stringify","window","updateTx","newTx","map","t","id","removeTx","filter","getStreams","a","web3","adapterAddress","adapterContract","eth","Contract","streamAdapterABI","adapter","methods","getSchedules","call","schedules","recoverStreams","destAddress","beneficiary","utils","fromAscii","s","amount","BigNumber","Math","random","toFixed","instant","source","dest","div","toNumber","startTime","duration","error","txHash","schedule","calculateStreamProgress","totalClaimablePercentrage","amountClaimedPercentage","start","Number","now","floor","Date","end","amountClaimed","updateStreamInfo","sched","minutesClaimed","Object","assign","claim","web3Context","claimAmount","lib","getGasPrice","gasPrice","send","from","accounts","round","gasLimit","on","hash","claimTransactions","concat","timestamp","confirmationNumber","receipt","completeDeposit","params","renResponse","renSignature","adapterABI","shiftInWithSwap","contractParams","sendAmount","args","nhash","result","addVestingSchedule","transactionHash","initShiftIn","shiftIn","ethSig","sdk","contractFn","name","messageID","sendTo","amt","data","sendToken","RenJS","Tokens","BTC","Btc2Eth","times","nonce","gatewayAddress","initDeposit","addr","waitForDeposit","dep","utxo","confirmations","btcTxHash","txid","deposit","submitToRenVM","signature","response","initInstantSwap","address","fetch","method","headers","body","sourceAmount","sourceAsset","destinationAsset","destinationAddress","request","json","initInstantMonitoring","setInterval","req","status","initMonitoring","signKey","ephemeral","relay_client_config","txfee","verbose","DepositContainer","fromConnection","gsn","swaps","getItem","streams","parse","clearInterval","swapMonitor","instantSwapSelected","transactions","disabled","contentContainer","direction","desc","btcLink","target","href","amountContainer","TextField","classNames","input","size","placeholder","InputProps","endAdornment","InputAdornment","position","switchContainer","FormControlLabel","control","Switch","checked","swapButtonContainer","Button","swapButton","onClick","startInstant","Divider","divider","unfinished","index","key","depositItem","depositStatus","SwapTransactionStatus","viewLink","info","caption","flexGrow","paper","padding","marginTop","marginBottom","fontSize","title","display","justifyContent","actionTabs","textAlign","complete","claimItem","links","marginLeft","progress","progressTop","progressMiddle","animationDuration","left","progressBottom","progressContainer","toLocaleString","ViewStreamContainer","loaded","totalClaimable","availableAmount","availablePercentage","remaingDuration","initAddressRef","createRef","interval","scheduleInterval","mounted","selectedTx","setState","current","calculateStats","period","claimableAmount","claimRequesting","backLink","back","hidden","initContainer","spinner","CircularProgress","spinnerTop","thickness","disableShrink","spinnerBottom","awaitingStatus","cancelLink","justify","depositAddress","inputRef","progressText","totalStreamed","decimals","claimButton","onView","onCancel","loadingContianer","margin","top","flexDirection","minWidth","claims","StreamContainer","activeView","searchAddress","searchLink","viewTx","radio","AppWrapper","selectedActionTab","Container","maxWidth","sm","App","ThemeProvider","createStore","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e497d8a.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            light: '#000',\n            main: '#000',\n            dark: '#000',\n            contrastText: '#fff',\n        },\n        // primary: blueGrey,\n        secondary: grey,\n    },\n    overrides: {\n        // Style sheet name ⚛️\n        // MuiButton: {\n        //   // Name of the rule\n        //   text: {\n        //     // Some CSS\n        //     color: 'white',\n        //   },\n        // }\n        PrivateNotchedOutline: {\n            root: {\n            }\n        },\n        // '.MuiOutlinedInput-root:hover':{\n        //     borderColor: '#EBEBEB !important'\n        // },\n        MuiOutlinedInput: {\n            // root:{\n            //     '&:hover': {\n            //         // notchedOutline: {\n            //             borderColor: '#EBEBEB'\n            //         // }\n            //     }\n            // },\n            notchedOutline: {\n                borderColor: '#EBEBEB !important',\n                borderWidth: '1px !important'\n            }\n        },\n        MuiTextField: {\n\n        },\n        MuiToggleButtonGroup: {\n          grouped: {\n            '&:not(:first-child)': {\n              borderLeft: '1px solid #EBEBEB'\n            }\n          }\n        },\n        // .MuiToggleButtonGroup-grouped:not(:first-child)\n        MuiToggleButton: {\n            root: {\n                border: '1px solid #EBEBEB',\n                backgroundColor: '#fff',\n                '&.Mui-selected': {\n                    // back\n                    backgroundColor: '#fff !important',\n                    color: '#000',\n                    fontWeight: '500',\n                    '&:hover': {\n                        backgroundColor: '#fff !important',\n                    }\n                },\n                '&:hover': {\n                    backgroundColor: '#fff !important',\n                }\n            }\n        }\n    }\n});\n","import React from 'react';\nimport Web3 from \"web3\";\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\n\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport WifiIcon from '@material-ui/icons/Wifi';\n\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\n\n\nconst styles = () => ({\n    navContainer: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(1),\n        minHeight: 52\n    },\n    logo: {\n        height: 22,\n        width: 25,\n        marginRight: theme.spacing(1)\n    },\n    accountButton: {\n      '& svg': {\n        marginRight: theme.spacing(1)\n      }\n    }\n})\n\nclass NavContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        const walletAddress = store.get('walletAddress')\n        const isSignedIn = walletAddress && walletAddress.length\n\n        console.log(this.props, this.state, this.props.store.getState())\n\n        return <Grid item xs={12}>\n            {<Grid className={classes.navContainer} container alignItems='center'>\n              <Grid item xs={6}>\n                  <Grid container alignItems='center'>\n                      <Typography variant='h6'>RenVM Interoperability</Typography>\n                  </Grid>\n              </Grid>\n            </Grid>}\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(NavContainer))\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\n\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\n\nconst styles = () => ({\n    tabs: {\n        paddingTop: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        '& .MuiTab-wrapper': {\n            alignItems: 'flex-end',\n            // paddingRight: theme.spacing(1)\n        }\n    }\n})\n\n\n\nclass ActionTabsContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = props.store.getState()\n    }\n\n    changeTabs(value) {\n        const { store } = this.props\n        store.set('selectedActionTab', value)\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        // console.log(this.props, this.state)\n\n        return <Tabs\n          orientation=\"vertical\"\n          value={store.get('selectedActionTab')}\n          onChange={(e, value) => {\n            this.changeTabs.bind(this)(value)\n          }}\n          className={classes.tabs}\n        >\n          <Tab value={'exchange'} label=\"Exchange\" />\n          <Tab value={'stream'} label=\"Streaming Payments\" />\n        </Tabs>\n    }\n}\n\nexport default withStyles(styles)(withStore(ActionTabsContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\n// import classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = () => ({\n})\n\nconst StreamTransactionStatus = function(props) {\n    const {\n        tx,\n    } = props\n\n    return <React.Fragment>\n            {tx.awaiting === 'btc-init' ? <span>\n                {`Waiting for BTC transaction to be initiated `}<br />{`${tx.renBtcAddress}`}\n            </span> : null}\n            {tx.awaiting === 'btc-settle' ? <span>\n                {`BTC transaction confirming (${tx.btcConfirmations}/${'2'} complete)`}\n            </span> : null}\n            {tx.awaiting === 'ren-settle' ? <span>\n                {`Submitting to RenVM`}\n            </span> : null}\n            {tx.awaiting === 'eth-settle' ? <span>\n                {`Submitting to Ethereum`}\n            </span> : null}\n            {!tx.awaiting ? <span>{`Swap complete`}</span> : null}\n    </React.Fragment>\n}\n\nexport default withStyles(styles)(StreamTransactionStatus);\n","import RenJS from \"@renproject/ren\";\nimport adapterABI from './exchangeAdapterSimpleABI.json'\nimport streamAdapterABI from './streamAdapterSimpleABI.json'\nimport BigNumber from 'bignumber.js'\n\nexport const API_URL = ''\n// export const API_URL = 'http://localhost:3000'\nexport const MIN_CLAIM_AMOUNT = 0.0001\nlet swapMonitor = null\n\n\nexport const addTx = (store, tx) => {\n    const storeString = tx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    let txs = store.get(storeString)\n    txs.push(tx)\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const updateTx = (store, newTx) => {\n    const storeString = newTx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    const txs = store.get(storeString).map(t => {\n        if (t.id === newTx.id) {\n            // const newTx = Object.assign(t, props)\n            return newTx\n        }\n        return t\n    })\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const removeTx = (store, tx) => {\n    const storeString = tx.type === 'swap' ? 'swap.transactions' : 'stream.transactions'\n    let txs = store.get(storeString).filter(t => (t.id !== tx.id))\n    // console.log(txs)\n    store.set(storeString, txs)\n    localStorage.setItem(storeString, JSON.stringify(txs))\n\n    // for debugging\n    window[storeString] = txs\n}\n\nexport const getStreams = async function() {\n    // console.log('search', destAddress)\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    // const web3Context = store.get('web3Context')\n    const adapterAddress = store.get('stream.adapterAddress')\n    const adapterContract = new web3.eth.Contract(streamAdapterABI, adapterAddress)\n    // console.log(adapterContract)\n    window.adapter = adapterContract\n    const schedules = await adapterContract.methods.getSchedules().call()\n    // console.log(schedules)\n    return schedules\n}\n\nexport const recoverStreams = async function(destAddress) {\n    const { store } = this.props\n    const web3 = store.get('web3')\n    const schedules = await getStreams.bind(this)()\n    const beneficiary = web3.utils.fromAscii(destAddress)\n\n    schedules.map(s => {\n        // console.log(s.beneficiary)\n        if (s.beneficiary === beneficiary) {\n            const amount = new BigNumber(s.amount)\n            const tx = {\n                id: 'tx-' + Math.random().toFixed(6),\n                type: 'stream',\n                instant: false,\n                awaiting: '',\n                source: 'btc',\n                dest: 'eth',\n                destAddress,\n                amount: amount.div(10 ** 8).toNumber(),\n                startTime: s.startTime,\n                duration: s.duration,\n                error: false,\n                txHash: '',\n                schedule: s\n            }\n\n            addTx(store, tx)\n        } else {\n            // show no results ui\n        }\n    })\n}\n\nexport const calculateStreamProgress = function(tx) {\n    const schedule = tx.schedule\n    let totalClaimablePercentrage = 0\n    let amountClaimedPercentage = 0\n\n    if (schedule) {\n        const start = Number(schedule.startTime)\n        const now = Math.floor(Date.now() / 1000)\n        const end = Number(schedule.startTime) + (Number(schedule.duration * 60))\n        const period = end - start\n        if (now > end) {\n            totalClaimablePercentrage = 100\n        } else {\n            totalClaimablePercentrage = Number((((now - start) / period) * 100).toFixed(1))\n        }\n        amountClaimedPercentage = Number(((schedule.amountClaimed / schedule.amount) * 100).toFixed(1))\n    }\n\n    return {\n        totalClaimablePercentrage,\n        amountClaimedPercentage\n    }\n}\n\n// make this better\nexport const updateStreamInfo = async function(tx) {\n    const { store } =  this.props\n    const web3 = store.get('web3')\n    const adapterAddress = store.get('stream.adapterAddress')\n    const { startTime, destAddress } = tx\n\n    const adapterContract = new web3.eth.Contract(streamAdapterABI, adapterAddress)\n\n    const beneficiary = web3.utils.fromAscii(destAddress)\n    const schedules = await getStreams.bind(this)()\n\n    const schedule = schedules.filter(s => (\n        Number(s.startTime) === Number(startTime) &&\n        s.beneficiary === beneficiary\n    ))[0]\n\n    if (schedule && schedule.beneficiary) {\n        // console.log('updateStreamInfo', schedules, schedule)\n        const sched = {\n            id: schedule.id,\n            beneficiary: schedule.beneficiary,\n            startTime: schedule.startTime,\n            duration: schedule.duration,\n            amount: schedule.amount,\n            amountClaimed: schedule.amountClaimed,\n            minutesClaimed: schedule.minutesClaimed\n        }\n        let newTx = Object.assign(tx, {})\n        newTx.schedule = sched\n        updateTx(store, newTx)\n    }\n}\n\nexport const claim = async function(tx) {\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    const web3Context = store.get('web3Context')\n\n    const adapterAddress = store.get('stream.adapterAddress')\n    const { destAddress, schedule } = tx\n\n    store.set('stream.claimRequesting', true)\n\n    const {\n        totalClaimablePercentrage,\n        amountClaimedPercentage\n    } = calculateStreamProgress(tx)\n\n    const claimAmount = (((totalClaimablePercentrage - amountClaimedPercentage) / 100) * tx.amount).toFixed(6)\n\n    const adapterContract = new web3.eth.Contract(streamAdapterABI, adapterAddress)\n    const gasPrice = await web3Context.lib.eth.getGasPrice()\n\n    // console.log('claiming tx', tx, schedule, schedule.id)\n\n    try {\n        const result = await adapterContract.methods.claim(\n            schedule.id\n        ).send({\n            from: web3Context.accounts[0],\n            gasPrice: Math.round(gasPrice * 1.5),\n            gasLimit: 150000\n        }).on('transactionHash', (hash) => {\n            updateTx(store, Object.assign(tx, {\n                claimTransactions: tx.claimTransactions.concat([{\n                    timestamp: Date.now(),\n                    amount: claimAmount,\n                    txHash: hash\n                }])\n            }))\n            store.set('stream.claimRequesting', false)\n        }).on('confirmation', (confirmationNumber, receipt) => {\n            // console.log('receipt', receipt)\n            updateStreamInfo.bind(this)(tx)\n        })\n        // console.log('result', result)\n    } catch(e) {\n        console.log(e)\n        store.set('stream.claimRequesting', false)\n    }\n}\n\nexport const completeDeposit = async function(tx) {\n    const { store }  = this.props\n    const web3 = store.get('web3')\n    const web3Context = store.get('web3Context')\n\n    // const adapterAddress = store.get('adapterAddress')\n    const { type, params, awaiting, renResponse, renSignature } = tx\n\n    let adapterContract\n    if (type === 'swap') {\n        adapterContract = new web3.eth.Contract(adapterABI, store.get('swap.adapterAddress'))\n    } else if (type === 'stream') {\n        adapterContract = new web3.eth.Contract(streamAdapterABI, store.get('stream.adapterAddress'))\n    }\n\n    const gasPrice = await web3Context.lib.eth.getGasPrice()\n\n    updateTx(store, Object.assign(tx, { awaiting: 'eth-settle' }))\n\n    // console.log('completeDeposit', tx)\n\n    try {\n        let result\n        if (type === 'swap') {\n            result = await adapterContract.methods.shiftInWithSwap(\n                params.contractParams[0].value,\n                params.sendAmount,\n                renResponse.args.nhash,\n                renSignature\n            ).send({\n                from: web3Context.accounts[0],\n                gasPrice: Math.round(gasPrice * 1.5),\n                gasLimit: 200000\n            })\n        } else if (type === 'stream') {\n            result = await adapterContract.methods.addVestingSchedule(\n                params.contractParams[0].value,\n                params.contractParams[1].value,\n                Number(params.contractParams[2].value),\n                params.sendAmount,\n                renResponse.args.nhash,\n                renSignature\n            ).send({\n                from: web3Context.accounts[0],\n                gasPrice: Math.round(gasPrice * 1.5),\n                gasLimit: 350000\n            })\n            await updateStreamInfo.bind(this)(tx)\n        }\n        updateTx(store, Object.assign(tx, { awaiting: '', txHash: result.transactionHash }))\n    } catch(e) {\n        // console.log(e)\n        updateTx(store, Object.assign(tx, { error: true }))\n    }\n}\n\nexport const initShiftIn = function(tx) {\n    const {\n      type,\n      amount,\n      renBtcAddress,\n      params,\n      ethSig,\n      destAddress,\n      // stream\n      startTime,\n      duration\n    } = tx\n    const {\n        sdk,\n        web3\n    } = this.props.store.getState()\n\n    let adapterAddress = ''\n    let contractFn = ''\n    let contractParams = []\n\n    if (type === 'swap') {\n        adapterAddress = this.props.store.get('swap.adapterAddress')\n        contractFn = 'shiftInWithSwap'\n        contractParams = [\n            {\n                name: \"_to\",\n                type: \"address\",\n                value: destAddress\n            }\n        ]\n    } else if (type === 'stream') {\n        adapterAddress = this.props.store.get('stream.adapterAddress')\n        contractFn = 'addVestingSchedule'\n        contractParams = [\n            {\n                name: \"_beneficiary\",\n                type: \"bytes\",\n                value: web3.utils.fromAscii(destAddress),\n            },\n            {\n                name: \"_startTime\",\n                type: \"uint256\",\n                value: startTime,\n            },\n            {\n                name: \"_duration\",\n                type: \"uint16\",\n                value: duration,\n            }\n        ]\n    }\n\n    // recreate shift in and override with existing data\n    let shiftIn\n    if (ethSig) {\n        shiftIn = sdk.shiftIn({\n            messageID: ethSig.messageID,\n            sendTo: adapterAddress,\n            contractFn,\n            contractParams,\n        });\n    } else {\n        const amt = new BigNumber(amount)\n        let data = {\n            sendToken: RenJS.Tokens.BTC.Btc2Eth,\n            sendAmount: amt.times(10 ** 8).toNumber(), // Convert to Satoshis\n            sendTo: adapterAddress,\n            contractFn,\n            contractParams,\n        }\n\n        if (params && params.nonce) {\n            data.nonce = params.nonce\n        }\n\n        shiftIn = sdk.shiftIn(data)\n    }\n\n    if (renBtcAddress && params) {\n        shiftIn.params = params\n        shiftIn.gatewayAddress = renBtcAddress\n    }\n\n    return shiftIn\n}\n\nexport const initDeposit = async function(tx) {\n    const { store }  = this.props\n    const {\n        params,\n        awaiting,\n        renResponse,\n        renSignature,\n        error,\n        btcConfirmations\n    } = tx\n\n    // console.log('initDeposit', tx)\n\n    // completed\n    if (!awaiting) return\n\n    // clear error when re-attempting\n    if (error) {\n        updateTx(store, Object.assign(tx, { error: false }))\n    }\n\n    // ren already exposed a signature\n    if (renResponse && renSignature) {\n        completeDeposit.bind(this)(tx)\n    } else {\n        // create or re-create shift in\n        const shiftIn = await initShiftIn.bind(this)(tx)\n\n        // console.log('initDeposit shiftin', shiftIn)\n\n        if (!params) {\n            addTx(store, Object.assign(tx, {\n                params: shiftIn.params,\n                renBtcAddress: shiftIn.addr()\n            }))\n        }\n\n        // wait for btc\n        const deposit = await shiftIn\n            .waitForDeposit(2)\n            .on(\"deposit\", dep => {\n                // console.log('on deposit', dep)\n                if (dep.utxo) {\n                    if (awaiting === 'btc-init') {\n                        updateTx(store, Object.assign(tx, {\n                            awaiting: 'btc-settle',\n                            btcConfirmations: dep.utxo.confirmations,\n                            btcTxHash: dep.utxo.txid\n                        }))\n                    } else {\n                        updateTx(store, Object.assign(tx, {\n                            btcConfirmations: dep.utxo.confirmations,\n                            btcTxHash: dep.utxo.txid\n                        }))\n                    }\n                }\n            })\n\n        updateTx(store, Object.assign(tx, { awaiting: 'ren-settle' }))\n\n        try {\n            const signature = await deposit.submitToRenVM();\n            updateTx(store, Object.assign(tx, {\n                renResponse: signature.response,\n                renSignature: signature.signature\n            }))\n\n            completeDeposit.bind(this)(tx)\n        } catch(e) {\n            console.log(e)\n        }\n    }\n}\n\nexport const initInstantSwap = async function(tx) {\n    const { store }  = this.props\n    const { params, awaiting, renResponse, renSignature, error } = tx\n\n    const address = store.get('swap.address')\n    const amount = store.get('swap.amount')\n\n    const request = await fetch(`${API_URL}/swap-gateway/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            sourceAmount: amount,\n            sourceAsset: 'BTC',\n            destinationAsset: 'ETH',\n            destinationAddress: address\n        })\n    })\n    const data = await request.json()\n    addTx(store, Object.assign(tx, {\n        renBtcAddress: data.gatewayAddress\n    }))\n}\n\nexport const initInstantMonitoring = function() {\n    swapMonitor = setInterval(async () => {\n        const transactions = this.props.store.get('swap.transactions')\n        transactions.filter((t) => (t.instant && t.awaiting === 'btc-init')).map(async tx => {\n            const req = await fetch(`${API_URL}/swap-gateway/status?gateway=${tx.renBtcAddress}`, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            const data = await req.json()\n            if (data.status === 'complete') {\n                updateTx(this.props.store, Object.assign(tx, {\n                    awaiting: '',\n                    txHash: data.txHash\n                }))\n            }\n        })\n    }, 1000)\n}\n\nexport const initMonitoring = function() {\n    const store = this.props.store\n\n    const txs = store.get('swap.transactions').concat(store.get('stream.transactions'))\n    // console.log('initMonitoring', txs)\n    txs.map(tx => {\n        if (tx.awaiting && !tx.instant) {\n            initDeposit.bind(this)(tx)\n        } else if (tx.type === 'stream') {\n            updateStreamInfo.bind(this)(tx)\n        }\n    })\n}\n\nexport default {\n    addTx,\n    updateTx,\n    removeTx,\n    completeDeposit,\n    initShiftIn,\n    initDeposit,\n    initMonitoring\n}\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\n\nimport BigNumber from \"bignumber.js\";\nimport RenJS from \"@renproject/ren\";\n\nimport {\n    fromConnection,\n    ephemeral\n} from \"@openzeppelin/network/lib\";\n\nimport SwapTransactionStatus from '../components/SwapTransactionStatus'\n\nimport {\n    initDeposit,\n    initMonitoring,\n    initInstantMonitoring,\n    removeTx,\n    updateTx,\n    initInstantSwap\n} from '../utils/txUtils'\n\nconst REACT_APP_TX_FEE = 100;\nconst signKey = ephemeral();\n// const gasPrice = 10000000000;\nconst relay_client_config = {\n  txfee: REACT_APP_TX_FEE,\n  // force_gasPrice: gasPrice, //override requested gas price\n  // gasPrice: gasPrice, //override requested gas price\n  // force_gasLimit: 200000, //override requested gas limit.\n  // gasLimit: 200000, //override requested gas limit.\n  verbose: true\n};\n\n\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n  },\n  navContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    minHeight: 52\n  },\n  contentContainer: {\n      // boxShadow: '0px 0px 30px 0px rgba(0, 0, 0, 0.05)',\n      // borderRadius: theme.shape.borderRadius,\n      border: '1px solid #333',\n      padding: theme.spacing(3),\n\n      marginTop: theme.spacing(4),\n      marginBottom: theme.spacing(3),\n      '& input': {\n      }\n  },\n  input: {\n      marginBottom: theme.spacing(2),\n      width: '100%',\n      '& input': {\n          fontSize: 12\n      },\n      '& p': {\n          fontSize: 12\n      },\n      '& .MuiOutlinedInput-notchedOutline': {\n          borderColor: 'rgba(0, 0, 0, 0.5) !important'\n      }\n  },\n  amountContainer: {\n    paddingRight: theme.spacing(1)\n  },\n  amount: {\n  },\n  title: {\n      fontSize: 16,\n      fontWeight: 500,\n      marginTop: theme.spacing(4)\n  },\n  unfinished: {\n      // marginTop: theme.spacing(3)\n  },\n  depositItem: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1)\n  },\n  depositStatus: {\n      display: 'flex',\n      justifyContent: 'space-between'\n  },\n  info: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1),\n      '& p': {\n          marginBottom: 0\n      }\n  },\n  divider: {\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor: '#999999'\n  },\n  desc: {\n      marginBottom: theme.spacing(4),\n      fontSize: 14,\n      display: 'flex',\n      alignItems: 'flex-end',\n      justifyContent: 'space-between'\n  },\n  btcLink: {\n      fontSize: 12\n  },\n  viewLink: {\n      fontSize: 12,\n      marginRight: theme.spacing(1),\n  },\n  actionTabs: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n  },\n  swapButtonContainer: {\n      textAlign: 'center',\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n  },\n  switchContainer: {\n      textAlign: 'center',\n      paddingBottom: theme.spacing(1),\n      '& .MuiFormControlLabel-label': {\n          fontSize: 12\n      }\n  },\n  swapButton: {\n  }\n})\n\nclass Ellipsis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            string: ''\n        }\n        this.interval = null\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const string = this.state.string\n            if (string.length < 3) {\n                this.setState({ string: (string + '.') })\n            } else {\n                this.setState({ string: '' })\n            }\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return <span>{this.state.string}</span>\n    }\n}\n\nclass DepositContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        const { store } = this.props\n\n        const web3Context = await fromConnection(\n            \"https://kovan.infura.io/v3/7be66f167c2e4a05981e2ffc4653dec2\",\n            {\n                gsn: { signKey, ...relay_client_config }\n            }\n        )\n\n        store.set('web3Context', web3Context)\n        store.set('web3', web3Context.lib)\n\n        const sdk = new RenJS('testnet')\n        store.set('sdk', sdk)\n\n        const swaps = localStorage.getItem('swap.transactions')\n        const streams = localStorage.getItem('stream.transactions')\n\n        if (swaps) {\n            store.set('swap.transactions', JSON.parse(swaps))\n        }\n\n        if (streams) {\n            store.set('stream.transactions', JSON.parse(streams))\n        }\n\n        // monitor normal swaps\n        initMonitoring.bind(this)()\n\n        // monitor instant swaps\n        initInstantMonitoring.bind(this)()\n\n        window.store = store\n\n        window.updateTx = updateTx.bind(this)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.swapMonitor)\n    }\n\n    async start() {\n        const { store } = this.props\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n        const transactions = store.get('swap.transactions')\n\n        const tx = {\n            id: 'tx-' + Math.floor(Math.random() * (10 ** 16)),\n            type: 'swap',\n            instant: false,\n            awaiting: 'btc-init',\n            destAddress: address,\n            amount: amount,\n            error: false,\n            txHash: ''\n        }\n\n        initDeposit.bind(this)(tx)\n    }\n\n    async startInstant() {\n        const { store } = this.props\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n        const transactions = store.get('swap.transactions')\n\n        const tx = {\n            id: 'tx-' + Math.floor(Math.random() * (10 ** 16)),\n            type: 'swap',\n            instant: true,\n            awaiting: 'btc-init',\n            destAddress: address,\n            amount: amount,\n            error: false,\n            txHash: ''\n        }\n\n        initInstantSwap.bind(this)(tx)\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        const adapterAddress = store.get('swap.adapterAddress')\n        const instantSwapSelected = store.get('swap.instantSwapSelected')\n        const transactions = store.get('swap.transactions')\n        const amount = store.get('swap.amount')\n        const address = store.get('swap.address')\n\n        console.log(store.getState())\n\n        const disabled = amount < 0.0001 || (amount > 0.0005 && instantSwapSelected) || !address\n\n        return <Grid container>\n            {/*<Typography variant={'h1'} className={classes.title}>Kovan ETH – Testnet BTC Exchange</Typography>*/}\n\n            <Grid item xs={12} className={classes.contentContainer}>\n                <Grid container direction='row'>\n                    <Grid className={classes.desc} item xs={12}>\n                        <span >Swap Testnet BTC for Kovan ETH</span>\n                        <span className={classes.btcLink}>Send testnet BTC from <a target='_blank' href={'https://tbtc.bitaps.com/'}>here</a></span>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container>\n                            <Grid item xs={4} className={classes.amountContainer}>\n                                <TextField className={classNames(classes.input, classes.amount)}\n                                    variant='outlined'\n                                    size='small'\n                                    placeholder='0.000000'\n                                    onChange={e => {\n                                        store.set('swap.amount', e.target.value)\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment className={classes.endAdornment} position=\"end\">BTC</InputAdornment>\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={8}>\n                                <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Send to ETH Address' onChange={e => {\n                                    store.set('swap.address', e.target.value)\n                                }}/>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                    <Grid item xs={12} className={classes.switchContainer}>\n                        <FormControlLabel control={<Switch checked={instantSwapSelected}\n                            color='primary'\n                            onChange={() => store.set('swap.instantSwapSelected', !instantSwapSelected)}\n                            value={\"instant\"} />} label=\"Faster swap (0 confirmations, 0.0005 BTC max)\" />\n                    </Grid>\n                    <Grid item xs={12} className={classes.swapButtonContainer}>\n                        <Button disabled={disabled} className={classes.swapButton} variant='outlined' color='primary' onClick={instantSwapSelected ? this.startInstant.bind(this) : this.start.bind(this)}>Start Swap</Button>\n                    </Grid>\n                    {transactions && transactions.length ? <Grid item xs={12}><Divider className={classes.divider} /></Grid> : null}\n                    <Grid item xs={12} className={classes.unfinished}>\n                        {transactions && transactions.length ? transactions.map((tx, index) => {\n                            return <Grid key={index} container direction='row' className={classes.depositItem}>\n                                <Grid item xs={3}>\n                                    {tx.amount} BTC\n                                </Grid>\n                                <Grid className={classes.depositStatus} item xs={9}>\n                                    <SwapTransactionStatus tx={tx} />\n                                    <div>\n                                        {tx.awaiting === 'btc-settle' ? <a className={classes.viewLink} target='_blank' href={`https://live.blockcypher.com/btc-testnet/tx/${tx.btcTxHash}`}>View transaction</a> : null}\n                                        {tx.awaiting === 'btc-init' || tx.error || !tx.awaiting ? <div>\n                                            {tx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://kovan.etherscan.io/tx/'+tx.txHash}>View transaction</a> : null}\n                                            <a href='javascript:;' onClick={() => {\n                                                removeTx(store, tx)\n                                            }}>{!tx.awaiting ? 'Clear' : 'Cancel'}</a></div> : null}\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        }) : null}\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            {<Grid item xs={12} className={classes.info}>\n                <p>\n                    <b className={classes.caption}>How it Works</b>\n                    <br/>\n                    <br/>\n                    This exchange uses <a target='_blank' href='https://renproject.io/'>RenVM</a>, <a target='_blank' href='https://uniswap.io/'>Uniswap</a>, and Open Zeppelin's <a target='_blank' href='https://gsn.openzeppelin.com/'>GSN</a> to facilitate trustless interoperabilty between Bitcoin and Ethereum. All swaps abstract ETH away from the user with the <b>GaaS pattern</b>, and faster swaps are faciliated using the <b>CaaS pattern</b>. To learn more, check out our interoperability tutorials below:\n                </p>\n                <p>\n                    <ul>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>GaaS Tutorial</a> | Gas-less transactions</li>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>CaaS tutorial</a> | Faster swaps via expedited confirmations</li>\n                    </ul>\n                </p>\n                <p>\n                    Swaps are submitted to the following adapter address: <a target='_blank' href={'https://kovan.etherscan.io/address/'+adapterAddress}>{adapterAddress}</a>\n                </p>\n                <p>\n                    To learn more about building interoperable applications like this with RenVM, check out our <a target='_blank' href='https://renproject.io/developers'>developer center</a> or the following links:\n                    <ul>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/ren-sdk'}>Getting started with RenJS</a></li>\n                        <li><a target='_blank' href={'https://docs.renproject.io/developers/gateway-js'}>Getting started with GatewayJS</a></li>\n                        <li><a target='_blank' href={'https://github.com/renproject/ren/wiki'}>Github Spec</a></li>\n                    </ul>\n                </p>\n                <p>\n\n                </p>\n            </Grid>}\n\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(DepositContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\n// import classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n})\n\nconst StreamTransactionStatus = function(props) {\n    const {\n        tx,\n    } = props\n\n    const {\n        totalClaimablePercentrage,\n        amountClaimedPercentage\n    } = calculateStreamProgress(tx)\n\n    const complete = totalClaimablePercentrage === 100\n\n    return <React.Fragment>\n            {tx.awaiting === 'btc-init' ? <span>\n                {`Waiting for BTC transaction to be initiated`}\n            </span> : null}\n            {tx.awaiting === 'btc-settle' ? <span>\n                {`BTC transaction confirming (${tx.btcConfirmations}/${'2'} complete)`}\n            </span> : null}\n            {tx.awaiting === 'ren-settle' ? <span>\n                {`Submitting to RenVM`}\n            </span> : null}\n            {tx.awaiting === 'eth-settle' ? <span>\n                {`Submitting to Ethereum`}\n            </span> : null}\n            {!tx.awaiting ? <span>{complete ? `Stream complete` : `Streaming in progress`}</span> : null}\n    </React.Fragment>\n}\n\nexport default withStyles(styles)(StreamTransactionStatus);\n","import React from 'react';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\n\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport StreamTransactionStatus from './StreamTransactionStatus'\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n    claimItem: {\n        fontSize: 12,\n        marginBottom: theme.spacing(1),\n        display: 'flex',\n        width: '100%'\n    },\n    depositStatus: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    links: {\n        '& a': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    progress: {\n        position: 'relative',\n        marginRight: theme.spacing(1),\n        width: 18,\n        height: 18\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n    info: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n})\n\nconst ClaimStreamTransaction = function(props) {\n    const {\n        tx,\n        index,\n        classes,\n    } = props\n\n    return <Grid className={classes.claimItem} key={index}>\n        <Grid item xs={4}>\n            <Grid container alignItems='center'>\n                <span>{tx.amount} BTC</span>\n            </Grid>\n        </Grid>\n        <Grid item xs={8} className={classes.info}>\n            <div className={classes.links}>\n                <a target='_blank' href={'https://kovan.etherscan.io/tx/'+tx.txHash}className={classes.viewLink}>\n                    View transaction\n                </a>\n            </div>\n            <div>\n                <span>{(new Date(tx.timestamp).toLocaleString())}</span>\n            </div>\n        </Grid>\n    </Grid>\n}\n\nexport default withStyles(styles)(ClaimStreamTransaction);\n","import React from 'react';\nimport theme from '../../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\nimport { withStore } from '@spyna/react-store'\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CountUp from 'react-countup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n\nimport {\n    claim,\n    updateStreamInfo,\n    removeTx,\n    calculateStreamProgress,\n    MIN_CLAIM_AMOUNT\n} from '../../utils/txUtils'\nimport StreamTransactionStatus from '../../components/StreamTransactionStatus'\nimport ClaimStreamTransaction from '../../components/ClaimStreamTransaction'\n\nconst styles = () => ({\n    progress: {\n        position: 'relative',\n        margin: '0px auto',\n        width: 250,\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n    progressText: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        '& p': {\n            margin: '0px'\n        }\n        // paddingTop: theme.spacing(5)\n    },\n    totalStreamed: {\n        fontSize: 24,\n        paddingBottom: theme.spacing(2)\n    },\n    spinner: {\n        position: 'relative',\n        margin: '0px auto',\n        width: 24,\n        marginBottom: theme.spacing(2)\n    },\n    spinnerTop: {\n        color: '#eee',\n    },\n    spinnerBottom: {\n        color: theme.palette.primary.main,\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    awaitingStatus: {\n        textAlign: 'center',\n        paddingBottom: theme.spacing(4),\n        fontSize: 12\n    },\n    claimButton: {\n        // margin: '0px auto'\n        textAlign: 'center',\n        paddingBottom: theme.spacing(3),\n        '& span': {\n            fontSize: 12\n        }\n    },\n    input: {\n        marginBottom: theme.spacing(2),\n        width: '100%',\n        '& input': {\n            fontSize: 12\n        },\n        '& p': {\n            fontSize: 12\n        },\n        '& .MuiOutlinedInput-notchedOutline': {\n            borderColor: 'rgba(0, 0, 0, 0.5) !important'\n        }\n    },\n    hidden: {\n        display: 'none'\n    },\n    initContainer: {\n        // paddingTop: theme.spacing(3),\n        '& a': {\n            fontSize: 12\n        }\n    },\n    backLink: {\n        fontSize: 12,\n        marginBottom: theme.spacing(3)\n    },\n    loadingContianer: {\n        // paddingTop: theme.spacing(3)\n    },\n    depositAddress: {\n        fontSize: 12,\n        textAlign: 'center',\n        '& span': {\n            paddingBottom: theme.spacing(1)\n        }\n    },\n    address: {\n        minWidth: 300,\n        width: 'auto'\n    },\n    divider: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        backgroundColor: '#999999'\n    },\n    claims: {\n    }\n})\n\n// clean up logic in this component\nclass ViewStreamContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            totalClaimable: '',\n            amountClaimed: '',\n            amountClaimedPercentage: '',\n            availableAmount: '',\n            availablePercentage: '',\n            remaingDuration: ''\n        }\n        this.initAddressRef = React.createRef()\n        this.interval = null\n        this.scheduleInterval = null\n        this.mounted = false\n    }\n\n    async componentDidMount() {\n        const { selectedTx } = this.props\n        await updateStreamInfo.bind(this)(selectedTx)\n        this.setState({\n            loaded: true\n        })\n\n        if (this.initAddressRef.current) {\n            this.initAddressRef.current.value = selectedTx.renBtcAddress\n        }\n\n        this.calculateStats()\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval)\n        }\n\n        // if (this.scheduleInterval) {\n        //     clearInterval(this.scheduleInterval)\n        // }\n    }\n\n    componentDidUpdate() {\n    }\n\n    calculateStats() {\n        const { selectedTx } = this.props\n        const schedule = selectedTx.schedule\n        if (schedule) {\n            const start = Number(schedule.startTime)\n            const end = Number(schedule.startTime) + (Number(schedule.duration * 60))\n            const totalClaimable = (schedule.amount / (10 ** 8)).toFixed(6)\n            const amountClaimed = (schedule.amountClaimed / (10 ** 8)).toFixed(6)\n            const amountClaimedPercentage = (amountClaimed / totalClaimable).toFixed(1) * 100\n\n            // animation\n            this.interval = setInterval(() => {\n                const now = Math.floor(Date.now() / 1000)\n                const period = end - start\n                let availablePercentage = 0\n                if (now > end) {\n                    availablePercentage = 100\n                    clearInterval(this.interval)\n                } else if (start > 0){\n                    availablePercentage = Number((((now - start) / period) * 100).toFixed(1))\n                }\n                const availableAmount = ((availablePercentage / 100) * totalClaimable).toFixed(6)\n                const remaingDuration = end - now\n\n\n                // console.log('mounted', this.mounted)\n\n                if (!this.mounted) {\n                    this.setState({\n                        totalClaimable,\n                        amountClaimed,\n                        amountClaimedPercentage,\n                        availableAmount,\n                        availablePercentage,\n                        remaingDuration\n                    })\n                    this.mounted = true\n                } else {\n                    this.setState({\n                        availablePercentage\n                    })\n                }\n            }, 10);\n\n            // // update schedule data\n            // this.scheduleInterval = setInterval(() => {\n            //     updateStreamInfo.bind(this)(selectedTx)\n            // }, (1000 * 10))\n        }\n    }\n\n    back() {\n        const { store } = this.props\n        store.set('stream.activeView', 'start')\n        store.set('stream.selectedTx', null)\n        // console.log('back')\n    }\n\n    render() {\n        const {\n            classes,\n            selectedTx,\n            store\n        } = this.props\n\n        const {\n            loaded,\n            totalClaimable,\n            amountClaimed,\n            amountClaimedPercentage,\n            availableAmount,\n            availablePercentage,\n            remaingDuration\n        } = this.state\n\n        const {\n            totalClaimablePercentrage\n        } = calculateStreamProgress(selectedTx)\n\n        const claimableAmount = selectedTx.schedule ? Number((selectedTx.schedule.amount * ((totalClaimablePercentrage - amountClaimedPercentage)/100)) / (10 ** 8)) : 0\n\n        const { claimTransactions } = selectedTx\n        const claimRequesting = store.get('stream.claimRequesting')\n\n        // console.log(availableAmount, claimableAmount)\n\n        return <React.Fragment>\n            <div className={classes.backLink}>\n                <a href='javascript:;' onClick={this.back.bind(this)}>{'Back'}</a>\n            </div>\n            {!loaded ? <Grid item xs={12} className={classes.loadingContianer}>\n                <div className={classes.spinner}>\n                      <CircularProgress\n                        variant=\"determinate\"\n                        value={100}\n                        className={classes.spinnerTop}\n                        size={24}\n                        thickness={4}\n                      />\n                      <CircularProgress\n                        variant=\"indeterminate\"\n                        disableShrink\n                        className={classes.spinnerBottom}\n                        size={24}\n                        thickness={4}\n                      />\n                </div>\n            </Grid> :\n            <React.Fragment>\n                <Grid item xs={12} className={selectedTx.schedule ? classes.hidden : classes.initContainer}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <div className={classes.spinner}>\n                                  <CircularProgress\n                                    variant=\"determinate\"\n                                    value={100}\n                                    className={classes.spinnerTop}\n                                    size={24}\n                                    thickness={4}\n                                  />\n                                  <CircularProgress\n                                    variant=\"indeterminate\"\n                                    disableShrink\n                                    className={classes.spinnerBottom}\n                                    size={24}\n                                    thickness={4}\n                                  />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} className={classes.awaitingStatus}>\n                            <StreamTransactionStatus tx={selectedTx} />\n                            {(selectedTx.awaiting === 'btc-init' || selectedTx.error) &&\n                                <p><a href='javascript:;'\n                                    className={classes.cancelLink}\n                                    onClick={() => {\n                                        removeTx(store, selectedTx)\n                                        store.set('stream.selectedTx', null)\n                                        store.set('stream.activeView', 'start')\n                                    }}>\n                                    Cancel\n                                </a></p>}\n\n                            {selectedTx.awaiting === 'btc-settle' && <p><a target='_blank' href={`https://live.blockcypher.com/btc-testnet/tx/${selectedTx.btcTxHash}`}\n                                className={classes.cancelLink}>\n                                View pending transaction\n                            </a></p>}\n                        </Grid>\n                        <Grid item xs={12} onClick={() => {}}>\n                            <Grid container justify='center'>\n                                {selectedTx.awaiting === 'btc-init' && <div className={classes.depositAddress}>\n                                    <p><span>{`Send ${selectedTx.amount} BTC to the following address:`}</span></p>\n                                    <TextField className={classNames(classes.input, classes.address)}\n                                        label={''}\n                                        variant='outlined'\n                                        size='small'\n                                        placeholder='Deposit Address'\n                                        inputRef={this.initAddressRef}/>\n                                </div>}\n                            </Grid>\n\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container justify='center'>\n                                {selectedTx.awaiting === 'btc-init' || selectedTx.error || !selectedTx.awaiting ? <div className={classes.cancelLink}>\n                                    {selectedTx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://kovan.etherscan.io/tx/'+selectedTx.txHash}>View transaction</a> : null}\n                                </div> : null}\n                                {/*<span  onClick={() => store.set('activeStreamView', 'start')}>Cancel</span>*/}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <div className={selectedTx.schedule && loaded ? classes.progressContainer : classes.hidden}>\n                    <Grid item xs={12}>\n                        <div className={classes.progress}>\n                              <CircularProgress\n                                variant=\"static\"\n                                value={100}\n                                className={classes.progressTop}\n                                size={250}\n                                thickness={2}\n                              />\n                              <CircularProgress\n                                variant=\"static\"\n                                className={classes.progressMiddle}\n                                size={250}\n                                value={Number(availablePercentage)}\n                                thickness={2}\n                              />\n                              <CircularProgress\n                                variant=\"static\"\n                                className={classes.progressBottom}\n                                size={250}\n                                value={Number(amountClaimedPercentage)}\n                                thickness={2}\n                              />\n                        </div>\n                        <div className={classes.progressText}>\n                            <div>\n                                <p className={classes.totalStreamed}>\n                                    <b>{totalClaimable} BTC</b>\n                                </p>\n                            </div>\n                            <p>\n                                <b>{amountClaimed} / <CountUp start={availableAmount} end={selectedTx.amount} duration={remaingDuration} decimals={6}>{availableAmount}</CountUp> BTC</b>\n                            </p>\n                            <p>\n                                <span>claimed</span>\n                            </p>\n                        </div>\n                    </Grid>\n                </div>\n                <Grid item xs={12} className={selectedTx.schedule && loaded ?classes.claimButton : classes.hidden}>\n                    {claimableAmount > MIN_CLAIM_AMOUNT ? <Button disabled={claimRequesting}\n                        className={''}\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => {\n                            claim.bind(this)(selectedTx)\n                        }}>\n                        Claim {claimableAmount.toFixed(6)} BTC\n                    </Button> : <span>{totalClaimablePercentrage < 100 ? `Minimum claim amount is ${MIN_CLAIM_AMOUNT} BTC` : 'All available funds claimed'}</span>}\n                </Grid>\n                {claimTransactions.length ? <Grid item xs={12}>\n                    <Divider className={classes.divider} />\n                </Grid> : null}\n                <div className={selectedTx.schedule && loaded ? classes.claimTransactions : classes.hidden}>\n                    {claimTransactions && claimTransactions.length ? claimTransactions.map((tx, index) => {\n                        return <ClaimStreamTransaction\n                            tx={tx}\n                            index={index}\n                            onView={t => {\n                            }}\n                            onCancel={t => {\n                            }}/>\n                    }) : null}\n                </div>\n            </React.Fragment>}\n        </React.Fragment>\n    }\n}\n\nexport default withStore(withStyles(styles)(ViewStreamContainer))\n","import React from 'react';\nimport theme from '../theme/theme'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/styles';\n\n\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport StreamTransactionStatus from './StreamTransactionStatus'\nimport { calculateStreamProgress } from '../utils/txUtils'\n\nconst styles = () => ({\n    depositItem: {\n        fontSize: 12,\n        marginBottom: theme.spacing(1)\n    },\n    depositStatus: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    links: {\n        '& a': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    progress: {\n        position: 'relative',\n        marginRight: theme.spacing(1),\n        width: 18,\n        height: 18\n        // marginBottom: theme.spacing(2)\n    },\n    progressTop: {\n        color: '#eee',\n    },\n    progressMiddle: {\n        color: '#63ccff78',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressBottom: {\n        color: '#039BE5',\n        animationDuration: '550ms',\n        position: 'absolute',\n        left: 0,\n    },\n    progressContainer: {\n        position: 'relative',\n        // paddingTop: theme.spacing(3),\n        marginBottom: theme.spacing(4)\n    },\n})\n\nconst StreamTransaction = function(props) {\n    // render() {\n        const {\n            tx,\n            index,\n            classes,\n            onView,\n            onCancel\n        } = props\n\n        const {\n            schedule\n        } = tx\n\n        const {\n            totalClaimablePercentrage,\n            amountClaimedPercentage\n        } = calculateStreamProgress(tx)\n\n        return <Grid key={index}\n                  container\n                  direction='row'\n                  className={classes.depositItem}>\n            <Grid item xs={4}>\n                <Grid container alignItems='center'>\n                    <div className={classes.progress}>\n                          <CircularProgress\n                            variant=\"static\"\n                            value={100}\n                            className={classes.progressTop}\n                            size={18}\n                            thickness={4}\n                          />\n                          <CircularProgress\n                            variant=\"static\"\n                            className={classes.progressMiddle}\n                            size={18}\n                            value={totalClaimablePercentrage}\n                            thickness={4}\n                          />\n                          <CircularProgress\n                            variant=\"static\"\n                            className={classes.progressBottom}\n                            size={18}\n                            value={amountClaimedPercentage}\n                            thickness={4}\n                          />\n                    </div>\n                    <span>{tx.amount} BTC</span>\n                </Grid>\n            </Grid>\n            <Grid className={classes.depositStatus} item xs={8}>\n                <StreamTransactionStatus tx={tx} />\n                <div className={classes.links}>\n                    <a href='javascript:;' className={classes.viewLink} onClick={() => (onView(tx))}>\n                        View\n                    </a>\n\n                    {/*tx.txHash ? <a className={classes.viewLink} target='_blank' href={'https://kovan.etherscan.io/tx/'+tx.txHash}>View transaction</a> : null*/}\n\n                    {/*tx.awaiting === 'btc-init' || tx.error ? <a href='javascript:;' onClick={() => {\n                        onCancel(tx)\n                    }}>Cancel</a> : null*/}\n                </div>\n            </Grid>\n        </Grid>\n    // }\n}\n\nexport default withStyles(styles)(StreamTransaction);\n","import React from 'react';\nimport { withStore } from '@spyna/react-store'\nimport { withStyles } from '@material-ui/styles';\nimport theme from '../../theme/theme'\nimport classNames from 'classnames'\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport BigNumber from \"bignumber.js\";\nimport RenJS from \"@renproject/ren\";\n\nimport {\n    fromConnection,\n    ephemeral\n} from \"@openzeppelin/network/lib\";\n\nimport {\n    initDeposit,\n    initMonitoring,\n    initInstantMonitoring,\n    removeTx,\n    initInstantSwap,\n    recoverStreams\n} from '../../utils/txUtils'\n\nimport ViewStream from './ViewStreamContainer'\nimport StreamTransaction from '../../components/StreamTransaction'\n\nconst REACT_APP_TX_FEE = 100;\nconst signKey = ephemeral();\n// const gasPrice = 10000000000;\nconst relay_client_config = {\n  txfee: REACT_APP_TX_FEE,\n  // force_gasPrice: gasPrice, //override requested gas price\n  // gasPrice: gasPrice, //override requested gas price\n  force_gasLimit: 200000, //override requested gas limit.\n  gasLimit: 200000, //override requested gas limit.\n  verbose: true\n};\n\n\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n  },\n  navContainer: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    minHeight: 52\n  },\n  contentContainer: {\n      // boxShadow: '0px 0px 30px 0px rgba(0, 0, 0, 0.05)',\n      // borderRadius: theme.shape.borderRadius,\n      border: '1px solid #333',\n      padding: theme.spacing(3),\n\n      marginTop: theme.spacing(4),\n      marginBottom: theme.spacing(3),\n      '& input': {\n      }\n  },\n  input: {\n      marginBottom: theme.spacing(2),\n      width: '100%',\n      '& input': {\n          fontSize: 12\n      },\n      '& p': {\n          fontSize: 12\n      },\n      '& .MuiOutlinedInput-notchedOutline': {\n          borderColor: 'rgba(0, 0, 0, 0.5) !important'\n      }\n  },\n  amountContainer: {\n    // paddingRight: theme.spacing(1)\n  },\n  amount: {\n  },\n  title: {\n      fontSize: 16,\n      fontWeight: 500,\n      marginTop: theme.spacing(4)\n  },\n  unfinished: {\n      // marginTop: theme.spacing(3)\n  },\n  depositItem: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1)\n  },\n  depositStatus: {\n      display: 'flex',\n      justifyContent: 'space-between'\n  },\n  info: {\n      fontSize: 12,\n      marginBottom: theme.spacing(1),\n      '& p': {\n          marginBottom: 0\n      }\n  },\n  divider: {\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor: '#999999'\n  },\n  desc: {\n      marginBottom: theme.spacing(4),\n      fontSize: 14,\n      display: 'flex',\n      alignItems: 'flex-end',\n      justifyContent: 'space-between'\n  },\n  btcLink: {\n      fontSize: 12\n  },\n  viewLink: {\n      fontSize: 12,\n      marginRight: theme.spacing(1),\n  },\n  actionTabs: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n  },\n  swapButtonContainer: {\n      textAlign: 'center',\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n  },\n  switchContainer: {\n      textAlign: 'center',\n      paddingBottom: theme.spacing(1),\n      '& .MuiFormControlLabel-label': {\n          fontSize: 12\n      }\n  },\n  swapButton: {\n  },\n  radio: {\n      marginBottom: theme.spacing(2),\n      flexDirection: 'row',\n      '& span': {\n        fontSize: 12\n      }\n  },\n  searchLink: {\n      fontSize: 12,\n      minWidth: 80\n  }\n})\n\nclass Ellipsis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            string: ''\n        }\n        this.interval = null\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const string = this.state.string\n            if (string.length < 3) {\n                this.setState({ string: (string + '.') })\n            } else {\n                this.setState({ string: '' })\n            }\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return <span>{this.state.string}</span>\n    }\n}\n\nclass StreamContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        const { store } = this.props\n\n        const txs = localStorage.getItem('stream.transactions')\n\n        if (txs) {\n            store.set('stream.transactions', JSON.parse(txs))\n        }\n\n        // // monitor normal swaps\n        // initMonitoring.bind(this)()\n        //\n        // // monitor instant swaps\n        // initInstantMonitoring.bind(this)()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.swapMonitor)\n    }\n\n    async start() {\n        const { store } = this.props\n        const amount = store.get('stream.amount')\n        const address = store.get('stream.address')\n        const startTime = Math.round(Date.now() / 1000)\n        const duration = store.get('stream.duration')\n\n        const tx = {\n            id: 'tx-' + Math.random().toFixed(6),\n            type: 'stream',\n            instant: false,\n            awaiting: 'btc-init',\n            btcConfirmations: 0,\n            btcTxHash: '',\n            destAddress: address,\n            amount: amount,\n            startTime,\n            duration,\n            error: false,\n            txHash: '',\n            claimTransactions: []\n        }\n\n        store.set('stream.selectedTx', tx)\n        store.set('stream.activeView', 'view-stream')\n\n        initDeposit.bind(this)(tx)\n    }\n\n    viewTx(tx) {\n        const { store } =  this.props\n\n        store.set('stream.selectedTx', tx)\n        store.set('stream.activeView', 'view-stream')\n    }\n\n    render() {\n        const {\n            classes,\n            store\n        } = this.props\n\n        // console.log(store.getState())\n\n        const amount = store.get('stream.amount')\n        const address = store.get('stream.address')\n        const duration = store.get('stream.duration')\n        const transactions = store.get('stream.transactions')\n        const activeView = store.get('stream.activeView')\n        const selectedTx = store.get('stream.selectedTx')\n        const searchAddress = store.get('stream.searchAddress')\n        const adapterAddress = store.get('stream.adapterAddress')\n\n        const disabled = amount < 0.00011 || !address || !duration\n        // const disabled = false\n\n        return <Grid container>\n            <Grid item xs={12} className={classes.contentContainer}>\n                <Grid container direction='row'>\n                    {activeView === 'start' && <React.Fragment>\n                        <Grid className={classes.desc} item xs={12}>\n                            <span >Continously Stream Testnet BTC</span>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.amountContainer}>\n                                    <TextField className={classNames(classes.input, classes.amount)}\n                                        variant='outlined'\n                                        size='small'\n                                        placeholder='0.000000'\n                                        onChange={e => {\n                                            store.set('stream.amount', e.target.value)\n                                        }}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment className={classes.endAdornment} position=\"end\">BTC</InputAdornment>\n                                        }}/>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Stream to BTC Address' onChange={e => {\n                                        store.set('stream.address', e.target.value)\n                                    }}/>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField className={classNames(classes.input, classes.address)} variant='outlined' size='small' placeholder='Duration in Minutes' onChange={e => {\n                                        store.set('stream.duration', e.target.value)\n                                    }}/>\n                                </Grid>\n                            </Grid>\n\n                        </Grid>\n                        <Grid item xs={12} className={classes.swapButtonContainer}>\n                            <Button disabled={disabled} className={classes.swapButton} variant='outlined' color='primary' onClick={this.start.bind(this)}>Start Stream</Button>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Divider className={classes.divider} />\n                        </Grid>\n                        <Grid item xs={12} className={classes.swapButtonContainer}>\n                            <TextField\n                                className={classNames(classes.input, classes.address)}\n                                variant='outlined'\n                                size='small'\n                                placeholder='Search by Destination Address'\n                                onChange={e => {\n                                    store.set('stream.searchAddress', e.target.value)\n                                }}\n                                InputProps={{\n                                    endAdornment: <InputAdornment\n                                        className={classes.searchLink}\n                                        position=\"end\">\n                                            <a href='javascript:;' onClick={() => {\n                                                recoverStreams.bind(this)(searchAddress)\n                                            }}>Get Streams</a>\n                                        </InputAdornment>\n                                }}/>\n                        </Grid>\n\n                        <Grid item xs={12} className={classes.unfinished}>\n                            {transactions && transactions.length ? transactions.map((tx, index) => {\n                                return <StreamTransaction\n                                    tx={tx}\n                                    index={index}\n                                    onView={t => {\n                                        this.viewTx.bind(this)(t)\n                                    }}\n                                    onCancel={t => {\n                                        removeTx(store, t)\n                                    }}/>\n                            }) : null}\n                        </Grid>\n                    </React.Fragment>}\n                    {activeView === 'view-stream' && <Grid container direction='row'>\n                        <Grid item xs={12}>\n                            <ViewStream selectedTx={selectedTx} />\n                        </Grid>\n                    </Grid>}\n                </Grid>\n            </Grid>\n\n            {<Grid item xs={12} className={classes.info}>\n                <p>\n                    <b className={classes.caption}>How it Works</b>\n                    <br/>\n                    <br/>\n                    This exchange uses <a target='_blank' href='https://renproject.io/'>RenVM</a> and Open Zeppelin's <a target='_blank' href='https://gsn.openzeppelin.com/'>GSN</a> to facilitate trustless interoperabilty between Bitcoin and Ethereum. Active streams are held in a smart contract that allows anyone to shift out a valid amount of earned BTC to the recipient BTC address at any time.\n                </p>\n                <p>\n                    Streams are facilitated through the following adapter address: <a target='_blank' href={'https://kovan.etherscan.io/address/'+adapterAddress}>{adapterAddress}</a>\n                </p>\n                <p>\n                    To learn more about building interoperable applications like this with RenVM, check out our <a target='_blank' href='https://renproject.io/developers'>developer center</a> or the following links:\n                </p>\n                <ul>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/tutorials'}>Bitcoin Payments Tutorial</a> | Scheduled Bitcoin Payments</li>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/ren-sdk'}>Getting started with RenJS</a></li>\n                    <li><a target='_blank' href={'https://docs.renproject.io/developers/gateway-js'}>Getting started with GatewayJS</a></li>\n                    <li><a target='_blank' href={'https://github.com/renproject/ren/wiki'}>Github Spec</a></li>\n                </ul>\n            </Grid>}\n\n        </Grid>\n    }\n}\n\nexport default withStyles(styles)(withStore(StreamContainer))\n","import React from 'react';\nimport { createStore, withStore } from '@spyna/react-store'\n\n\nimport NavContainer from './containers/NavContainer'\nimport ActionTabsContainer from './containers/ActionTabsContainer'\nimport DepositContainer from './containers/DepositContainer'\nimport StreamContainer from './containers/Stream/StreamContainer'\n\n\nimport theme from './theme/theme'\nimport classNames from 'classnames'\n\nimport { withStyles, ThemeProvider } from '@material-ui/styles';\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\n// import TabPanel from '@material-ui/core/TabPanel'\n\nconst styles = () => ({\n})\n\nconst initialState = {\n    'selectedActionTab': 'exchange',\n    // exchange\n    'swap.transactions': [],\n    'swap.adapterAddress': '0xade8792c3ee90320cabde200ccab34b27cc88651',\n    'swap.instantSwapSelected': false,\n    'swap.amount': '',\n    'swap.address': '',\n    // streaming\n    'stream.adapterAddress': '0x49ADDF7Cae3552C3f6991b6931DbcfAc28E11846',\n    'stream.transactions': [],\n    'stream.amount': '',\n    'stream.destination': '',\n    'stream.duration': '',\n    'stream.activeView': 'start',\n    'stream.selectedTx': null,\n    'stream.searchAddress': '',\n    'stream.claimRequesting': false\n}\n\nconst AppWrapper = withStore(function(props) {\n    const { store } = props\n    const {\n        selectedActionTab\n    } = store.getState()\n\n    return <Container maxWidth=\"lg\">\n        <Grid container>\n            {/*<Grid item xs={12}>\n                <NavContainer />\n            </Grid>*/}\n            <Grid item sm={3}>\n                <ActionTabsContainer />\n            </Grid>\n            <Grid item sm={6}>\n                {selectedActionTab === 'exchange' && <DepositContainer />}\n                {selectedActionTab === 'stream' && <StreamContainer />}\n            </Grid>\n        </Grid>\n    </Container>\n})\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    async componentDidMount() {\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <ThemeProvider theme={theme}>\n                <AppWrapper />\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default createStore(withStyles(styles)(App), initialState)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}